{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.2d7529.css","path":"main.2d7529.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.d238ee.js","path":"mobile.d238ee.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.885efe.js","path":"slider.885efe.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.2d7529.js","path":"main.2d7529.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","path":"fonts/iconfont.59e68b.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","path":"fonts/iconfont.b7ae25.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","path":"fonts/iconfont.ca3627.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","path":"fonts/iconfont.dba24b.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/yilia/.DS_Store","hash":"380f15669689aca431ae2a6a75ec6442b5b48127","modified":1487643162000},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1487642754000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1487642754000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1487642754000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1487642754000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1487642754000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1487642754000},{"_id":"themes/yilia/README.md","hash":"0becd9c18f9d44fc364788a34a4f3ec82ca7940a","modified":1487642754000},{"_id":"themes/yilia/_config.yml","hash":"feeef9a5473b3963152e41a8c7858a891c9844cf","modified":1487658075000},{"_id":"themes/yilia/package.json","hash":"946b26ae0dff42c590068f0a58ecd326ed059b68","modified":1487642754000},{"_id":"themes/yilia/webpack.config.js","hash":"c4dca5c60822c90359e48fad373be768ae9fb43d","modified":1487642754000},{"_id":"source/_posts/FMDB.md","hash":"773f3c31485b180e696e4d0f03ae285f93025f97","modified":1487640809000},{"_id":"source/_posts/KVC-KVO.md","hash":"d5e3e1e05f0a08c2b90b61e2a7a40501b6ca07b6","modified":1487640809000},{"_id":"source/_posts/Modal.md","hash":"667d54ae68e84e833b4cb16a046f5d1dc3546e78","modified":1487640809000},{"_id":"source/_posts/git使用简单总结.md","hash":"ea7e436462b9461cc4e781df05d13a9fdfd3d8a0","modified":1487640809000},{"_id":"source/_posts/关于GCD.md","hash":"56921f1faa5bdf582b270ce346e51705f3989095","modified":1487640809000},{"_id":"source/_posts/关于MD5.md","hash":"6979d39be268a74329b4094da015d6bf91140f38","modified":1487659069000},{"_id":"source/_posts/加密概述.md","hash":"6fe41fc206569323cf1d4e8f3b8a9481e6536d2b","modified":1487660235000},{"_id":"source/_posts/初识热更新.md","hash":"efb44572e9daa23d7583983bb9d0aec625d9685c","modified":1487661900000},{"_id":"source/_posts/对人工智能的一点看法.md","hash":"a3a272fc3a63dbf1e52965b2fd2da3cbd83fa34a","modified":1487640809000},{"_id":"source/_posts/运动给我势能.md","hash":"6196a4ce7c74a462c49e2840115514303cdf0187","modified":1487657646000},{"_id":"themes/yilia/.git/FETCH_HEAD","hash":"928f6e340894af80a5070c167b82cac69bb0ea95","modified":1487642775000},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1487642754000},{"_id":"themes/yilia/.git/ORIG_HEAD","hash":"16c9033891e94fe5e58ea0af0d925519a76eb2c1","modified":1487642775000},{"_id":"themes/yilia/.git/config","hash":"256e47c5a4386e6881318e44d2a716fdc3197863","modified":1487642754000},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1487642744000},{"_id":"themes/yilia/.git/index","hash":"55943ba0bdcccd8acc0a9ecae6b477d4fcf8dff4","modified":1487643222000},{"_id":"themes/yilia/.git/packed-refs","hash":"ce0fffa24e8426ff1d3cdd215fc2af90b9c41a37","modified":1487642754000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1487642754000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1487642754000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1487642754000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1487642754000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1487642754000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1487642754000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1487642754000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1487642754000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1487642754000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1487642754000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1487642754000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1487642754000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1487642754000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1487642754000},{"_id":"source/.DS_Store","hash":"765a28f2a7dabf4317159a59ecd8c9a2e71f2c07","modified":1487659352000},{"_id":"themes/yilia/source/main.2d7529.css","hash":"2eef112e365f9b00664302ba98b517662c75d411","modified":1487642754000},{"_id":"themes/yilia/source/mobile.d238ee.js","hash":"a054884092af1cc5c2c14e5e11a4dac6d9254481","modified":1487642754000},{"_id":"themes/yilia/source/slider.885efe.js","hash":"1f1a6548c6016cc132bf65a1701cc8421a1f8414","modified":1487642754000},{"_id":"themes/yilia/source-src/.DS_Store","hash":"fdba600f6ab8b2cd33a27fb2046a925be2c85d10","modified":1487643167000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1487642754000},{"_id":"source/_posts/.DS_Store","hash":"29a85727af512f1aa3cb1993e178f5cede315c9a","modified":1487661391000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1487642754000},{"_id":"themes/yilia/source/main.2d7529.js","hash":"988c141a741441812bcf4c408ef530d7a01522f3","modified":1487642754000},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1487642744000},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1487642744000},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1487642744000},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1487642744000},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1487642744000},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1487642744000},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1487642744000},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1487642744000},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1487642744000},{"_id":"themes/yilia/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1487642744000},{"_id":"themes/yilia/.git/logs/HEAD","hash":"f039cb1220c24b971ba435ba4da1051ff4e6d685","modified":1487642754000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"143710485f734c5a997e0b1c26192bbba2982bcc","modified":1487642754000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1487642754000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1487642754000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"aadab85a35042afdcbce768a32bb9121b0ad1831","modified":1487642754000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1487642754000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"db8c42ab7e339c240b7044896a3987555ea9b5b8","modified":1487642754000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1487642754000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1487642754000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1487642754000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1487642754000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"2387d91cf94b0b36e8a36841992a5fce63ebd069","modified":1487642754000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1487642754000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1487642754000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"8c295469bd1602e9d3bbf2fee81ff84cacb1d701","modified":1487642754000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"f5e98b6013c968afb867626ed6617cd1cedc3d3a","modified":1487642754000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1487642754000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1487642754000},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1487642754000},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1487642754000},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1487642754000},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","hash":"3313bf984fbee56b022942a5d19c916b4734fd60","modified":1487642754000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1487642754000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1487642754000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1487642754000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1487642754000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1487642754000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1487642754000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"b750499d5120f963b683d0c96ac3f345c714e448","modified":1487642754000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"ce24ab7049be634c17a163e2db39f1f0b1f7c119","modified":1487642754000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"b68772aa2b47d0ed89ce95d4e9d3d27931fe885c","modified":1487642754000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1487642754000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1487642754000},{"_id":"themes/yilia/source-src/css/duoshuo.scss","hash":"5e3feefbbba70d8da0ec2c75db41762dd4762a81","modified":1487642754000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"d9c1a22a561dc6072833a2f049b3639c0007283d","modified":1487642754000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1487642754000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1487642754000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1487642754000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1487642754000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0ce6345a86c44e3fea5a4aa439614541112538f3","modified":1487642754000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"40c055e8360973a75db7c13f3280a4f465f9e5e3","modified":1487642754000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1487642754000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"12abb65289eed5391d657b963a20f96a473b1cbd","modified":1487642754000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1487642754000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1487642754000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1487642754000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1487642754000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a14f37a57ce7a720a36196f6469d8be955284f8c","modified":1487642754000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1487642754000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1487642754000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"61917c928d09783a3bc8a91503a59ab3a8696e90","modified":1487642754000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1487642754000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1487642754000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1487642754000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"17be4f27eb8951835c29dafd0f6ba1b18e47cc6b","modified":1487642754000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1487642754000},{"_id":"themes/yilia/source-src/js/main.js","hash":"d665f4cf30450984591bc8ad2348a1baf720d04b","modified":1487642754000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1487642754000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1487642754000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1487642754000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"3bf0d70ae171404a0dc73c33ec48927fc2521a54","modified":1487642754000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1487642754000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"808a2e1ed407984cfdc929b827d3638f70ec9a2a","modified":1487642754000},{"_id":"themes/yilia/.git/refs/heads/master","hash":"16c9033891e94fe5e58ea0af0d925519a76eb2c1","modified":1487642754000},{"_id":"themes/yilia/.git/objects/pack/pack-00cb1b394438441bdb4dd3ae1952fa02d3b96034.idx","hash":"e1b8c892d9cb8f8445f88570b13ab5a1e7bd0940","modified":1487642754000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"c2dccf1a95ec09ceeee5004293ac7edb7e1c9a66","modified":1487642754000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1487642754000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1487642754000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1487642754000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1487642754000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1487642754000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1487642754000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1487642754000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1487642754000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1487642754000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1487642754000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1487642754000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1487642754000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"3313bf984fbee56b022942a5d19c916b4734fd60","modified":1487642754000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1487642754000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1487642754000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1487642754000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1487642754000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1487642754000},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"f039cb1220c24b971ba435ba4da1051ff4e6d685","modified":1487642754000},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1487642754000},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"f039cb1220c24b971ba435ba4da1051ff4e6d685","modified":1487642754000},{"_id":"themes/yilia/.git/objects/pack/pack-00cb1b394438441bdb4dd3ae1952fa02d3b96034.pack","hash":"710b6974229ca82c99c6a2ecf93184316fd6af3a","modified":1487642754000},{"_id":"public/content.json","hash":"b6cb168462b2ad1734e73dc1ed1239f209564eca","modified":1487661950655},{"_id":"public/2017/02/06/对人工智能的一点看法/index.html","hash":"a12d32945a8fe1f7cb17c129be9faa4da26fb526","modified":1487661950903},{"_id":"public/2017/01/16/git使用简单总结/index.html","hash":"dd968598c5d713140dcfebb5b1567cc7ba02e000","modified":1487661950915},{"_id":"public/2017/01/11/运动给我势能/index.html","hash":"e9eff7b564c46c3af1fe6679d4bae8e2d10a4967","modified":1487661950916},{"_id":"public/2017/01/10/关于GCD/index.html","hash":"457e0ca60a56c3baaa3bd6cc339af93ce8ee4110","modified":1487661950916},{"_id":"public/2016/06/06/Modal/index.html","hash":"0501e36779fb078c54cca721df1d78c96a86afd3","modified":1487661950916},{"_id":"public/2016/06/02/FMDB/index.html","hash":"a0972c46c0bf8b83c17818fc7cca47556910aff2","modified":1487661950916},{"_id":"public/2016/05/13/加密概述/index.html","hash":"9a73762f85412ce19ac6319bb61a918b3a9ea634","modified":1487661950916},{"_id":"public/2016/04/10/关于MD5/index.html","hash":"fb1763f7fbe43278bec71f76d1992b15dffc4343","modified":1487661950916},{"_id":"public/2016/01/20/KVC-KVO/index.html","hash":"4e0fdda4f452e933695fa8bbd61e64913e33ce35","modified":1487661950916},{"_id":"public/archives/index.html","hash":"6375a05a031c642245ed96bea61c940fb7f65865","modified":1487661950916},{"_id":"public/archives/2016/index.html","hash":"3157de25e78a8f441a9a05612d5e50e4cbf74e80","modified":1487661950917},{"_id":"public/archives/2016/01/index.html","hash":"62c612605d1af941bc51e61edabff5c9d7f368a1","modified":1487661950917},{"_id":"public/archives/2016/04/index.html","hash":"d2e1ff45136a799bb18ca1229542f6643b71aa45","modified":1487661950917},{"_id":"public/archives/2016/05/index.html","hash":"c355fe7f68b3c0c827859118884a70f5bf4fd536","modified":1487661950917},{"_id":"public/archives/2016/06/index.html","hash":"89d590f24e76546141d1d5c2b4981c20479031a2","modified":1487661950917},{"_id":"public/archives/2017/index.html","hash":"3ae02d5c64e2e82931bb4204158036c12550ae2a","modified":1487661950917},{"_id":"public/archives/2017/01/index.html","hash":"69f3b38494235ffdc41b6225666d1310af8892d0","modified":1487661950917},{"_id":"public/archives/2017/02/index.html","hash":"1478bc4932588f3519377d4d86914577e6cff728","modified":1487661950917},{"_id":"public/index.html","hash":"1bd141216d01a8efc9d1892c12df504c5d2e99de","modified":1487661950917},{"_id":"public/tags/iOS学习/index.html","hash":"a7eba74569e440d3609f22f48672d8eb36ba9ee3","modified":1487661950917},{"_id":"public/tags/随笔/index.html","hash":"51f4d7f7d9da54c4f2931bc5642b3ea3e55c94c0","modified":1487661950917},{"_id":"public/2017/02/21/初识热更新/index.html","hash":"748149f1565d1ae6126bd279430aba19d68730d6","modified":1487661950923},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1487661950927},{"_id":"public/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1487661950927},{"_id":"public/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1487661950927},{"_id":"public/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1487661950927},{"_id":"public/fonts/iconfont.dba24b.svg","hash":"3313bf984fbee56b022942a5d19c916b4734fd60","modified":1487661950927},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1487661950927},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1487661950927},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1487661950927},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1487661950927},{"_id":"public/main.2d7529.css","hash":"2eef112e365f9b00664302ba98b517662c75d411","modified":1487661950936},{"_id":"public/mobile.d238ee.js","hash":"a054884092af1cc5c2c14e5e11a4dac6d9254481","modified":1487661950936},{"_id":"public/slider.885efe.js","hash":"1f1a6548c6016cc132bf65a1701cc8421a1f8414","modified":1487661950936},{"_id":"public/main.2d7529.js","hash":"988c141a741441812bcf4c408ef530d7a01522f3","modified":1487661950936}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"FMDB","date":"2016-06-02T14:04:52.000Z","_content":"\n\n","source":"_posts/FMDB.md","raw":"---\ntitle: FMDB\ndate: 2016-06-02 22:04:52\ntags: iOS学习\n---\n\n\n","slug":"FMDB","published":1,"updated":"2017-02-21T01:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizf7ij1900003lfty6l3y7i5","content":"","excerpt":"","more":""},{"title":"KVC/KVO","date":"2016-01-20T14:19:20.000Z","_content":"\n\n","source":"_posts/KVC-KVO.md","raw":"---\ntitle: KVC/KVO\ndate: 2016-01-20 22:19:20\ntags: iOS学习\n---\n\n\n","slug":"KVC-KVO","published":1,"updated":"2017-02-21T01:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizf7ij1e00013lft7pjpltcq","content":"","excerpt":"","more":""},{"title":"Modal","date":"2016-06-06T14:06:29.000Z","_content":"\n\n","source":"_posts/Modal.md","raw":"---\ntitle: Modal\ndate: 2016-06-06 22:06:29\ntags: iOS学习\n---\n\n\n","slug":"Modal","published":1,"updated":"2017-02-21T01:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizf7ij1k00033lft53s1kcci","content":"","excerpt":"","more":""},{"title":"git使用简单总结","date":"2017-01-16T15:07:02.000Z","_content":"\n**几个概念：**\n\n工作区：仓库文件夹里除.git目录以外的内容\n\n版本库：.git目录，用于存储记录版本信息\n\n暂缓区（stage）\n\n分支（master）：git自动创建的第一个分支\n\nHEAD指针：用于指向当前分支\n\n    注：显示隐藏文件命令：\n    defaults write com.apple.finder AppleShowAllFiles -bool true(false)\n\n#### 一、个人演练（命令行演练）\n1. 进入到工作目录中，初始化一个代码仓库：git init\n\n2. 给该git仓库配置一个用户名和邮箱：\ngit config user.name \"gengbinghan\"\ngit config user.email \"9777@qq.com\"\n\n3. 初始化代码：\ntouch main.m -> git status -> Untracked files:（红色文件）：新添加或者新修改的文件在工作区中，没有被添加到暂缓区中\ngit add main.m -> git status -> Changes to be committed:（绿色文件） :将工作区的代码已经添加到暂缓区，可以提交到代码仓库中了\n\n4. 查看文件的状态：git status\n\n    * Untracked files:(红色文件)：新添加或者新修改的文件在工作区中，没有被添加到暂缓区中\n    \n    * Changes to be committed:（绿色文件） :将工作区的代码已经添加到暂缓区，可以提交到代码仓库中了\n\n5. git commit -m \"xxxx\"（提交代码）\n[master (root-commit) 949712f] 初始化项目\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 main.m\n\n6. 修改文件：\nopen main.m\n\n7. git add .\n将工作区所有的文件添加到暂缓区里面\n\n8. 给git命令其别名:\ngit config alias.要起的别名 “要给谁其别名”\n例: git config alias.ci \"commit -m\"\n\n9. 查看历史版本\ngit  log\n*git 版本号：61d5d0c23e7e1b772c32829ed2feb130728fae66\n*git版本号是由sha1加密算法生成的一个40位的哈希值\ngit reflog\n\n10. 版本回退\ngit reset --hard HEAD：回退当前版本（当前版本未提交）\ngit reset --hard 版本号\n\n11. --global的作用（配置全局的用户名和密码，其他地方可以不配置）\n    \n    * git config --global user.name \"gengbinghan\"\n    \n    * git config --glabal user.email \"9777@qq.com\"\n\n#### 二、团队开发（共享版本库）\n\n文件夹/U盘/Github/oschina\n\n1. 创建一个代码共享库（让一个文件夹成为共享库）\ngit init -- bare\n\n2. 经理将我们的共享代码仓库中的内容clone下来\ngit clone 地址\n\n3. 项目经理初始化项目\n* 忽略文件：在我们的.git 同级目录下创建一个.gitignore文件，在该文件中指定需要忽略的文件\n* github上搜索：.gitignore -> 打开ObjectiveC -> 复制文件内容到新建的.ignore文件中(https://github.com/github/gitignore/blob/master/Objective-C.gitignore)\n* git add . -> git commit --m \"注释\"，将.gitignore添加到本地仓库管理中\n\n4. OSChina和Github的使用\n\n","source":"_posts/git使用简单总结.md","raw":"---\ntitle: git使用简单总结\ndate: 2017-01-16 23:07:02\ntags: iOS学习\n---\n\n**几个概念：**\n\n工作区：仓库文件夹里除.git目录以外的内容\n\n版本库：.git目录，用于存储记录版本信息\n\n暂缓区（stage）\n\n分支（master）：git自动创建的第一个分支\n\nHEAD指针：用于指向当前分支\n\n    注：显示隐藏文件命令：\n    defaults write com.apple.finder AppleShowAllFiles -bool true(false)\n\n#### 一、个人演练（命令行演练）\n1. 进入到工作目录中，初始化一个代码仓库：git init\n\n2. 给该git仓库配置一个用户名和邮箱：\ngit config user.name \"gengbinghan\"\ngit config user.email \"9777@qq.com\"\n\n3. 初始化代码：\ntouch main.m -> git status -> Untracked files:（红色文件）：新添加或者新修改的文件在工作区中，没有被添加到暂缓区中\ngit add main.m -> git status -> Changes to be committed:（绿色文件） :将工作区的代码已经添加到暂缓区，可以提交到代码仓库中了\n\n4. 查看文件的状态：git status\n\n    * Untracked files:(红色文件)：新添加或者新修改的文件在工作区中，没有被添加到暂缓区中\n    \n    * Changes to be committed:（绿色文件） :将工作区的代码已经添加到暂缓区，可以提交到代码仓库中了\n\n5. git commit -m \"xxxx\"（提交代码）\n[master (root-commit) 949712f] 初始化项目\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 main.m\n\n6. 修改文件：\nopen main.m\n\n7. git add .\n将工作区所有的文件添加到暂缓区里面\n\n8. 给git命令其别名:\ngit config alias.要起的别名 “要给谁其别名”\n例: git config alias.ci \"commit -m\"\n\n9. 查看历史版本\ngit  log\n*git 版本号：61d5d0c23e7e1b772c32829ed2feb130728fae66\n*git版本号是由sha1加密算法生成的一个40位的哈希值\ngit reflog\n\n10. 版本回退\ngit reset --hard HEAD：回退当前版本（当前版本未提交）\ngit reset --hard 版本号\n\n11. --global的作用（配置全局的用户名和密码，其他地方可以不配置）\n    \n    * git config --global user.name \"gengbinghan\"\n    \n    * git config --glabal user.email \"9777@qq.com\"\n\n#### 二、团队开发（共享版本库）\n\n文件夹/U盘/Github/oschina\n\n1. 创建一个代码共享库（让一个文件夹成为共享库）\ngit init -- bare\n\n2. 经理将我们的共享代码仓库中的内容clone下来\ngit clone 地址\n\n3. 项目经理初始化项目\n* 忽略文件：在我们的.git 同级目录下创建一个.gitignore文件，在该文件中指定需要忽略的文件\n* github上搜索：.gitignore -> 打开ObjectiveC -> 复制文件内容到新建的.ignore文件中(https://github.com/github/gitignore/blob/master/Objective-C.gitignore)\n* git add . -> git commit --m \"注释\"，将.gitignore添加到本地仓库管理中\n\n4. OSChina和Github的使用\n\n","slug":"git使用简单总结","published":1,"updated":"2017-02-21T01:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizf7ij1l00043lft0jm3t0wz","content":"<p><strong>几个概念：</strong></p>\n<p>工作区：仓库文件夹里除.git目录以外的内容</p>\n<p>版本库：.git目录，用于存储记录版本信息</p>\n<p>暂缓区（stage）</p>\n<p>分支（master）：git自动创建的第一个分支</p>\n<p>HEAD指针：用于指向当前分支</p>\n<pre><code>注：显示隐藏文件命令：\ndefaults write com.apple.finder AppleShowAllFiles -bool true(false)\n</code></pre><h4 id=\"一、个人演练（命令行演练）\"><a href=\"#一、个人演练（命令行演练）\" class=\"headerlink\" title=\"一、个人演练（命令行演练）\"></a>一、个人演练（命令行演练）</h4><ol>\n<li><p>进入到工作目录中，初始化一个代码仓库：git init</p>\n</li>\n<li><p>给该git仓库配置一个用户名和邮箱：<br>git config user.name “gengbinghan”<br>git config user.email “9777@qq.com”</p>\n</li>\n<li><p>初始化代码：<br>touch main.m -&gt; git status -&gt; Untracked files:（红色文件）：新添加或者新修改的文件在工作区中，没有被添加到暂缓区中<br>git add main.m -&gt; git status -&gt; Changes to be committed:（绿色文件） :将工作区的代码已经添加到暂缓区，可以提交到代码仓库中了</p>\n</li>\n<li><p>查看文件的状态：git status</p>\n<ul>\n<li><p>Untracked files:(红色文件)：新添加或者新修改的文件在工作区中，没有被添加到暂缓区中</p>\n</li>\n<li><p>Changes to be committed:（绿色文件） :将工作区的代码已经添加到暂缓区，可以提交到代码仓库中了</p>\n</li>\n</ul>\n</li>\n<li><p>git commit -m “xxxx”（提交代码）<br>[master (root-commit) 949712f] 初始化项目<br>1 file changed, 0 insertions(+), 0 deletions(-)<br>create mode 100644 main.m</p>\n</li>\n<li><p>修改文件：<br>open main.m</p>\n</li>\n<li><p>git add .<br>将工作区所有的文件添加到暂缓区里面</p>\n</li>\n<li><p>给git命令其别名:<br>git config alias.要起的别名 “要给谁其别名”<br>例: git config alias.ci “commit -m”</p>\n</li>\n<li><p>查看历史版本<br>git  log<br><em>git 版本号：61d5d0c23e7e1b772c32829ed2feb130728fae66\n</em>git版本号是由sha1加密算法生成的一个40位的哈希值<br>git reflog</p>\n</li>\n<li><p>版本回退<br>git reset –hard HEAD：回退当前版本（当前版本未提交）<br>git reset –hard 版本号</p>\n</li>\n<li><p>–global的作用（配置全局的用户名和密码，其他地方可以不配置）</p>\n<ul>\n<li><p>git config –global user.name “gengbinghan”</p>\n</li>\n<li><p>git config –glabal user.email “9777@qq.com”</p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"二、团队开发（共享版本库）\"><a href=\"#二、团队开发（共享版本库）\" class=\"headerlink\" title=\"二、团队开发（共享版本库）\"></a>二、团队开发（共享版本库）</h4><p>文件夹/U盘/Github/oschina</p>\n<ol>\n<li><p>创建一个代码共享库（让一个文件夹成为共享库）<br>git init – bare</p>\n</li>\n<li><p>经理将我们的共享代码仓库中的内容clone下来<br>git clone 地址</p>\n</li>\n<li><p>项目经理初始化项目</p>\n</li>\n</ol>\n<ul>\n<li>忽略文件：在我们的.git 同级目录下创建一个.gitignore文件，在该文件中指定需要忽略的文件</li>\n<li>github上搜索：.gitignore -&gt; 打开ObjectiveC -&gt; 复制文件内容到新建的.ignore文件中(<a href=\"https://github.com/github/gitignore/blob/master/Objective-C.gitignore\" target=\"_blank\" rel=\"external\">https://github.com/github/gitignore/blob/master/Objective-C.gitignore</a>)</li>\n<li>git add . -&gt; git commit –m “注释”，将.gitignore添加到本地仓库管理中</li>\n</ul>\n<ol>\n<li>OSChina和Github的使用</li>\n</ol>\n","excerpt":"","more":"<p><strong>几个概念：</strong></p>\n<p>工作区：仓库文件夹里除.git目录以外的内容</p>\n<p>版本库：.git目录，用于存储记录版本信息</p>\n<p>暂缓区（stage）</p>\n<p>分支（master）：git自动创建的第一个分支</p>\n<p>HEAD指针：用于指向当前分支</p>\n<pre><code>注：显示隐藏文件命令：\ndefaults write com.apple.finder AppleShowAllFiles -bool true(false)\n</code></pre><h4 id=\"一、个人演练（命令行演练）\"><a href=\"#一、个人演练（命令行演练）\" class=\"headerlink\" title=\"一、个人演练（命令行演练）\"></a>一、个人演练（命令行演练）</h4><ol>\n<li><p>进入到工作目录中，初始化一个代码仓库：git init</p>\n</li>\n<li><p>给该git仓库配置一个用户名和邮箱：<br>git config user.name “gengbinghan”<br>git config user.email “9777@qq.com”</p>\n</li>\n<li><p>初始化代码：<br>touch main.m -&gt; git status -&gt; Untracked files:（红色文件）：新添加或者新修改的文件在工作区中，没有被添加到暂缓区中<br>git add main.m -&gt; git status -&gt; Changes to be committed:（绿色文件） :将工作区的代码已经添加到暂缓区，可以提交到代码仓库中了</p>\n</li>\n<li><p>查看文件的状态：git status</p>\n<ul>\n<li><p>Untracked files:(红色文件)：新添加或者新修改的文件在工作区中，没有被添加到暂缓区中</p>\n</li>\n<li><p>Changes to be committed:（绿色文件） :将工作区的代码已经添加到暂缓区，可以提交到代码仓库中了</p>\n</li>\n</ul>\n</li>\n<li><p>git commit -m “xxxx”（提交代码）<br>[master (root-commit) 949712f] 初始化项目<br>1 file changed, 0 insertions(+), 0 deletions(-)<br>create mode 100644 main.m</p>\n</li>\n<li><p>修改文件：<br>open main.m</p>\n</li>\n<li><p>git add .<br>将工作区所有的文件添加到暂缓区里面</p>\n</li>\n<li><p>给git命令其别名:<br>git config alias.要起的别名 “要给谁其别名”<br>例: git config alias.ci “commit -m”</p>\n</li>\n<li><p>查看历史版本<br>git  log<br><em>git 版本号：61d5d0c23e7e1b772c32829ed2feb130728fae66\n</em>git版本号是由sha1加密算法生成的一个40位的哈希值<br>git reflog</p>\n</li>\n<li><p>版本回退<br>git reset –hard HEAD：回退当前版本（当前版本未提交）<br>git reset –hard 版本号</p>\n</li>\n<li><p>–global的作用（配置全局的用户名和密码，其他地方可以不配置）</p>\n<ul>\n<li><p>git config –global user.name “gengbinghan”</p>\n</li>\n<li><p>git config –glabal user.email “9777@qq.com”</p>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"二、团队开发（共享版本库）\"><a href=\"#二、团队开发（共享版本库）\" class=\"headerlink\" title=\"二、团队开发（共享版本库）\"></a>二、团队开发（共享版本库）</h4><p>文件夹/U盘/Github/oschina</p>\n<ol>\n<li><p>创建一个代码共享库（让一个文件夹成为共享库）<br>git init – bare</p>\n</li>\n<li><p>经理将我们的共享代码仓库中的内容clone下来<br>git clone 地址</p>\n</li>\n<li><p>项目经理初始化项目</p>\n</li>\n</ol>\n<ul>\n<li>忽略文件：在我们的.git 同级目录下创建一个.gitignore文件，在该文件中指定需要忽略的文件</li>\n<li>github上搜索：.gitignore -&gt; 打开ObjectiveC -&gt; 复制文件内容到新建的.ignore文件中(<a href=\"https://github.com/github/gitignore/blob/master/Objective-C.gitignore\">https://github.com/github/gitignore/blob/master/Objective-C.gitignore</a>)</li>\n<li>git add . -&gt; git commit –m “注释”，将.gitignore添加到本地仓库管理中</li>\n</ul>\n<ol>\n<li>OSChina和Github的使用</li>\n</ol>\n"},{"title":"关于GCD","date":"2017-01-10T14:44:54.000Z","_content":"\n#### 1.GCD基本知识\n\n01.两个核心概念——队列和任务\n\n> 任务：执行什么操作\n队列：用来存放任务\n\n02.同步函数和异步函数\n\n#### 2.GCD基本使用\n\nGCD的使用就两个步骤：**定制任务确定想做的事、将任务添加到队列中**：\n\n> 1.GCD会自动将队列中的任务取出，放到对应的线程中执行\n2.任务的取出遵循队列的FIFO原则：先进先出，后进后出 \n\n    01.异步函数+并发队列：开启多条线程，并发执行任务\n    \n    02.异步函数+串行对列：开启一条线程，串行执行任务\n    \n    03.同步函数+并发队列：不开线程，并发执行任务\n    \n    04.同步函数+串行对列：不开线程，串行执行任务\n    \n    05.异步函数+主队列：不开线程，在主队列中串行执行任务\n    \n    06.同步函数+主队列：不开线程，串行执行任务（注意死锁发生）\n    \n    07.注意同步函数和异步函数在执行顺序上的差异\n\n#### 3.GCD线程间通信\n\n```\n//0.获取一个全局的队列\n    dispatch_queue_t queue = dispatch_get_global_queue(0, 0);\n\n    //1.先开启一个线程，把下载图片的操作放在子线程中处理\n    dispatch_async(queue, ^{\n\n       //2.下载图片\n        NSURL *url = [NSURL URLWithString:@\"http://h.hiphotos.baidu.com/zhidao/pic/item/6a63f6246b600c3320b14bb3184c510fd8f9a185.jpg\"];\n        NSData *data = [NSData dataWithContentsOfURL:url];\n        UIImage *image = [UIImage imageWithData:data];\n\n        NSLog(@\"下载操作所在的线程--%@\",[NSThread currentThread]);\n\n        //3.回到主线程刷新UI\n        dispatch_async(dispatch_get_main_queue(), ^{\n           self.imageView.image = image;\n           //打印查看当前线程\n            NSLog(@\"刷新UI---%@\",[NSThread currentThread]);\n        });\n\n    });\n```\n#### 4.GCD其他常用函数\n\n```\n01 栅栏函数（控制任务的执行顺序）\n    dispatch_barrier_async(queue, ^{\n        NSLog(@\"--dispatch_barrier_async-\");\n    });\n\n    02 延迟执行（延迟·控制在哪个线程执行）\n      dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0 * NSEC_PER_SEC)), dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        NSLog(@\"---%@\",[NSThread currentThread]);\n    });\n\n    03 一次性代码（注意不能放到懒加载）\n    -(void)once\n    {\n        //整个程序运行过程中只会执行一次\n        //onceToken用来记录该部分的代码是否被执行过\n        static dispatch_once_t onceToken;\n        dispatch_once(&onceToken, ^{\n\n            NSLog(@\"-----\");\n        });\n    }\n\n    04 快速迭代（开多个线程并发完成迭代操作）\n       dispatch_apply(subpaths.count, queue, ^(size_t index) {\n    });\n\n    05 队列组（同栅栏函数）\n    //创建队列组\n    dispatch_group_t group = dispatch_group_create();\n    //队列组中的任务执行完毕之后，执行该函数\n    dispatch_group_notify(dispatch_group_t group,dispatch_queue_t queue,dispatch_block_t block);\n\n    06进入群组和离开群组\n    dispatch_group_enter(group);//执行该函数后，后面异步执行的block会被gruop监听\n    dispatch_group_leave(group);//异步block中，所有的任务都执行完毕，最后离开群组\n    //注意：dispatch_group_enter|dispatch_group_leave必须成对使用\n```\n\n#### 5.容易混淆的术语\n\n有四个术语容易混淆：**同步、异步、并发、串行**\n\n* 同步和异步主要影响：能不能开启新的线程\n\n    *   同步：只是在当前线程中执行任务，不具备开启新线程的能力\n    *   异步：可以在新的线程中执行任务，具备开启新线程的能力  \n     \n* 并发和串行主要影响：任务的执行方式\n\n    * 并发：允许多个任务并发（同时）执行\n    * 串行：一个任务执行完毕后，在执行下一个任务\n             \n\n\n","source":"_posts/关于GCD.md","raw":"---\ntitle: 关于GCD\ndate: 2017-01-10 22:44:54\ntags: iOS学习\n---\n\n#### 1.GCD基本知识\n\n01.两个核心概念——队列和任务\n\n> 任务：执行什么操作\n队列：用来存放任务\n\n02.同步函数和异步函数\n\n#### 2.GCD基本使用\n\nGCD的使用就两个步骤：**定制任务确定想做的事、将任务添加到队列中**：\n\n> 1.GCD会自动将队列中的任务取出，放到对应的线程中执行\n2.任务的取出遵循队列的FIFO原则：先进先出，后进后出 \n\n    01.异步函数+并发队列：开启多条线程，并发执行任务\n    \n    02.异步函数+串行对列：开启一条线程，串行执行任务\n    \n    03.同步函数+并发队列：不开线程，并发执行任务\n    \n    04.同步函数+串行对列：不开线程，串行执行任务\n    \n    05.异步函数+主队列：不开线程，在主队列中串行执行任务\n    \n    06.同步函数+主队列：不开线程，串行执行任务（注意死锁发生）\n    \n    07.注意同步函数和异步函数在执行顺序上的差异\n\n#### 3.GCD线程间通信\n\n```\n//0.获取一个全局的队列\n    dispatch_queue_t queue = dispatch_get_global_queue(0, 0);\n\n    //1.先开启一个线程，把下载图片的操作放在子线程中处理\n    dispatch_async(queue, ^{\n\n       //2.下载图片\n        NSURL *url = [NSURL URLWithString:@\"http://h.hiphotos.baidu.com/zhidao/pic/item/6a63f6246b600c3320b14bb3184c510fd8f9a185.jpg\"];\n        NSData *data = [NSData dataWithContentsOfURL:url];\n        UIImage *image = [UIImage imageWithData:data];\n\n        NSLog(@\"下载操作所在的线程--%@\",[NSThread currentThread]);\n\n        //3.回到主线程刷新UI\n        dispatch_async(dispatch_get_main_queue(), ^{\n           self.imageView.image = image;\n           //打印查看当前线程\n            NSLog(@\"刷新UI---%@\",[NSThread currentThread]);\n        });\n\n    });\n```\n#### 4.GCD其他常用函数\n\n```\n01 栅栏函数（控制任务的执行顺序）\n    dispatch_barrier_async(queue, ^{\n        NSLog(@\"--dispatch_barrier_async-\");\n    });\n\n    02 延迟执行（延迟·控制在哪个线程执行）\n      dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0 * NSEC_PER_SEC)), dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n        NSLog(@\"---%@\",[NSThread currentThread]);\n    });\n\n    03 一次性代码（注意不能放到懒加载）\n    -(void)once\n    {\n        //整个程序运行过程中只会执行一次\n        //onceToken用来记录该部分的代码是否被执行过\n        static dispatch_once_t onceToken;\n        dispatch_once(&onceToken, ^{\n\n            NSLog(@\"-----\");\n        });\n    }\n\n    04 快速迭代（开多个线程并发完成迭代操作）\n       dispatch_apply(subpaths.count, queue, ^(size_t index) {\n    });\n\n    05 队列组（同栅栏函数）\n    //创建队列组\n    dispatch_group_t group = dispatch_group_create();\n    //队列组中的任务执行完毕之后，执行该函数\n    dispatch_group_notify(dispatch_group_t group,dispatch_queue_t queue,dispatch_block_t block);\n\n    06进入群组和离开群组\n    dispatch_group_enter(group);//执行该函数后，后面异步执行的block会被gruop监听\n    dispatch_group_leave(group);//异步block中，所有的任务都执行完毕，最后离开群组\n    //注意：dispatch_group_enter|dispatch_group_leave必须成对使用\n```\n\n#### 5.容易混淆的术语\n\n有四个术语容易混淆：**同步、异步、并发、串行**\n\n* 同步和异步主要影响：能不能开启新的线程\n\n    *   同步：只是在当前线程中执行任务，不具备开启新线程的能力\n    *   异步：可以在新的线程中执行任务，具备开启新线程的能力  \n     \n* 并发和串行主要影响：任务的执行方式\n\n    * 并发：允许多个任务并发（同时）执行\n    * 串行：一个任务执行完毕后，在执行下一个任务\n             \n\n\n","slug":"关于GCD","published":1,"updated":"2017-02-21T01:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizf7ij1o00053lftpmqz7ru5","content":"<h4 id=\"1-GCD基本知识\"><a href=\"#1-GCD基本知识\" class=\"headerlink\" title=\"1.GCD基本知识\"></a>1.GCD基本知识</h4><p>01.两个核心概念——队列和任务</p>\n<blockquote>\n<p>任务：执行什么操作<br>队列：用来存放任务</p>\n</blockquote>\n<p>02.同步函数和异步函数</p>\n<h4 id=\"2-GCD基本使用\"><a href=\"#2-GCD基本使用\" class=\"headerlink\" title=\"2.GCD基本使用\"></a>2.GCD基本使用</h4><p>GCD的使用就两个步骤：<strong>定制任务确定想做的事、将任务添加到队列中</strong>：</p>\n<blockquote>\n<p>1.GCD会自动将队列中的任务取出，放到对应的线程中执行<br>2.任务的取出遵循队列的FIFO原则：先进先出，后进后出 </p>\n</blockquote>\n<pre><code>01.异步函数+并发队列：开启多条线程，并发执行任务\n\n02.异步函数+串行对列：开启一条线程，串行执行任务\n\n03.同步函数+并发队列：不开线程，并发执行任务\n\n04.同步函数+串行对列：不开线程，串行执行任务\n\n05.异步函数+主队列：不开线程，在主队列中串行执行任务\n\n06.同步函数+主队列：不开线程，串行执行任务（注意死锁发生）\n\n07.注意同步函数和异步函数在执行顺序上的差异\n</code></pre><h4 id=\"3-GCD线程间通信\"><a href=\"#3-GCD线程间通信\" class=\"headerlink\" title=\"3.GCD线程间通信\"></a>3.GCD线程间通信</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">//0.获取一个全局的队列</div><div class=\"line\">    dispatch_queue_t queue = dispatch_get_global_queue(0, 0);</div><div class=\"line\"></div><div class=\"line\">    //1.先开启一个线程，把下载图片的操作放在子线程中处理</div><div class=\"line\">    dispatch_async(queue, ^&#123;</div><div class=\"line\"></div><div class=\"line\">       //2.下载图片</div><div class=\"line\">        NSURL *url = [NSURL URLWithString:@&quot;http://h.hiphotos.baidu.com/zhidao/pic/item/6a63f6246b600c3320b14bb3184c510fd8f9a185.jpg&quot;];</div><div class=\"line\">        NSData *data = [NSData dataWithContentsOfURL:url];</div><div class=\"line\">        UIImage *image = [UIImage imageWithData:data];</div><div class=\"line\"></div><div class=\"line\">        NSLog(@&quot;下载操作所在的线程--%@&quot;,[NSThread currentThread]);</div><div class=\"line\"></div><div class=\"line\">        //3.回到主线程刷新UI</div><div class=\"line\">        dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">           self.imageView.image = image;</div><div class=\"line\">           //打印查看当前线程</div><div class=\"line\">            NSLog(@&quot;刷新UI---%@&quot;,[NSThread currentThread]);</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"4-GCD其他常用函数\"><a href=\"#4-GCD其他常用函数\" class=\"headerlink\" title=\"4.GCD其他常用函数\"></a>4.GCD其他常用函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">01 栅栏函数（控制任务的执行顺序）</div><div class=\"line\">    dispatch_barrier_async(queue, ^&#123;</div><div class=\"line\">        NSLog(@&quot;--dispatch_barrier_async-&quot;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    02 延迟执行（延迟·控制在哪个线程执行）</div><div class=\"line\">      dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0 * NSEC_PER_SEC)), dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</div><div class=\"line\">        NSLog(@&quot;---%@&quot;,[NSThread currentThread]);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    03 一次性代码（注意不能放到懒加载）</div><div class=\"line\">    -(void)once</div><div class=\"line\">    &#123;</div><div class=\"line\">        //整个程序运行过程中只会执行一次</div><div class=\"line\">        //onceToken用来记录该部分的代码是否被执行过</div><div class=\"line\">        static dispatch_once_t onceToken;</div><div class=\"line\">        dispatch_once(&amp;onceToken, ^&#123;</div><div class=\"line\"></div><div class=\"line\">            NSLog(@&quot;-----&quot;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    04 快速迭代（开多个线程并发完成迭代操作）</div><div class=\"line\">       dispatch_apply(subpaths.count, queue, ^(size_t index) &#123;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    05 队列组（同栅栏函数）</div><div class=\"line\">    //创建队列组</div><div class=\"line\">    dispatch_group_t group = dispatch_group_create();</div><div class=\"line\">    //队列组中的任务执行完毕之后，执行该函数</div><div class=\"line\">    dispatch_group_notify(dispatch_group_t group,dispatch_queue_t queue,dispatch_block_t block);</div><div class=\"line\"></div><div class=\"line\">    06进入群组和离开群组</div><div class=\"line\">    dispatch_group_enter(group);//执行该函数后，后面异步执行的block会被gruop监听</div><div class=\"line\">    dispatch_group_leave(group);//异步block中，所有的任务都执行完毕，最后离开群组</div><div class=\"line\">    //注意：dispatch_group_enter|dispatch_group_leave必须成对使用</div></pre></td></tr></table></figure>\n<h4 id=\"5-容易混淆的术语\"><a href=\"#5-容易混淆的术语\" class=\"headerlink\" title=\"5.容易混淆的术语\"></a>5.容易混淆的术语</h4><p>有四个术语容易混淆：<strong>同步、异步、并发、串行</strong></p>\n<ul>\n<li><p>同步和异步主要影响：能不能开启新的线程</p>\n<ul>\n<li>同步：只是在当前线程中执行任务，不具备开启新线程的能力</li>\n<li>异步：可以在新的线程中执行任务，具备开启新线程的能力  </li>\n</ul>\n</li>\n<li><p>并发和串行主要影响：任务的执行方式</p>\n<ul>\n<li>并发：允许多个任务并发（同时）执行</li>\n<li>串行：一个任务执行完毕后，在执行下一个任务</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h4 id=\"1-GCD基本知识\"><a href=\"#1-GCD基本知识\" class=\"headerlink\" title=\"1.GCD基本知识\"></a>1.GCD基本知识</h4><p>01.两个核心概念——队列和任务</p>\n<blockquote>\n<p>任务：执行什么操作<br>队列：用来存放任务</p>\n</blockquote>\n<p>02.同步函数和异步函数</p>\n<h4 id=\"2-GCD基本使用\"><a href=\"#2-GCD基本使用\" class=\"headerlink\" title=\"2.GCD基本使用\"></a>2.GCD基本使用</h4><p>GCD的使用就两个步骤：<strong>定制任务确定想做的事、将任务添加到队列中</strong>：</p>\n<blockquote>\n<p>1.GCD会自动将队列中的任务取出，放到对应的线程中执行<br>2.任务的取出遵循队列的FIFO原则：先进先出，后进后出 </p>\n</blockquote>\n<pre><code>01.异步函数+并发队列：开启多条线程，并发执行任务\n\n02.异步函数+串行对列：开启一条线程，串行执行任务\n\n03.同步函数+并发队列：不开线程，并发执行任务\n\n04.同步函数+串行对列：不开线程，串行执行任务\n\n05.异步函数+主队列：不开线程，在主队列中串行执行任务\n\n06.同步函数+主队列：不开线程，串行执行任务（注意死锁发生）\n\n07.注意同步函数和异步函数在执行顺序上的差异\n</code></pre><h4 id=\"3-GCD线程间通信\"><a href=\"#3-GCD线程间通信\" class=\"headerlink\" title=\"3.GCD线程间通信\"></a>3.GCD线程间通信</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">//0.获取一个全局的队列</div><div class=\"line\">    dispatch_queue_t queue = dispatch_get_global_queue(0, 0);</div><div class=\"line\"></div><div class=\"line\">    //1.先开启一个线程，把下载图片的操作放在子线程中处理</div><div class=\"line\">    dispatch_async(queue, ^&#123;</div><div class=\"line\"></div><div class=\"line\">       //2.下载图片</div><div class=\"line\">        NSURL *url = [NSURL URLWithString:@&quot;http://h.hiphotos.baidu.com/zhidao/pic/item/6a63f6246b600c3320b14bb3184c510fd8f9a185.jpg&quot;];</div><div class=\"line\">        NSData *data = [NSData dataWithContentsOfURL:url];</div><div class=\"line\">        UIImage *image = [UIImage imageWithData:data];</div><div class=\"line\"></div><div class=\"line\">        NSLog(@&quot;下载操作所在的线程--%@&quot;,[NSThread currentThread]);</div><div class=\"line\"></div><div class=\"line\">        //3.回到主线程刷新UI</div><div class=\"line\">        dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class=\"line\">           self.imageView.image = image;</div><div class=\"line\">           //打印查看当前线程</div><div class=\"line\">            NSLog(@&quot;刷新UI---%@&quot;,[NSThread currentThread]);</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">    &#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"4-GCD其他常用函数\"><a href=\"#4-GCD其他常用函数\" class=\"headerlink\" title=\"4.GCD其他常用函数\"></a>4.GCD其他常用函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">01 栅栏函数（控制任务的执行顺序）</div><div class=\"line\">    dispatch_barrier_async(queue, ^&#123;</div><div class=\"line\">        NSLog(@&quot;--dispatch_barrier_async-&quot;);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    02 延迟执行（延迟·控制在哪个线程执行）</div><div class=\"line\">      dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2.0 * NSEC_PER_SEC)), dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</div><div class=\"line\">        NSLog(@&quot;---%@&quot;,[NSThread currentThread]);</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    03 一次性代码（注意不能放到懒加载）</div><div class=\"line\">    -(void)once</div><div class=\"line\">    &#123;</div><div class=\"line\">        //整个程序运行过程中只会执行一次</div><div class=\"line\">        //onceToken用来记录该部分的代码是否被执行过</div><div class=\"line\">        static dispatch_once_t onceToken;</div><div class=\"line\">        dispatch_once(&amp;onceToken, ^&#123;</div><div class=\"line\"></div><div class=\"line\">            NSLog(@&quot;-----&quot;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    04 快速迭代（开多个线程并发完成迭代操作）</div><div class=\"line\">       dispatch_apply(subpaths.count, queue, ^(size_t index) &#123;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    05 队列组（同栅栏函数）</div><div class=\"line\">    //创建队列组</div><div class=\"line\">    dispatch_group_t group = dispatch_group_create();</div><div class=\"line\">    //队列组中的任务执行完毕之后，执行该函数</div><div class=\"line\">    dispatch_group_notify(dispatch_group_t group,dispatch_queue_t queue,dispatch_block_t block);</div><div class=\"line\"></div><div class=\"line\">    06进入群组和离开群组</div><div class=\"line\">    dispatch_group_enter(group);//执行该函数后，后面异步执行的block会被gruop监听</div><div class=\"line\">    dispatch_group_leave(group);//异步block中，所有的任务都执行完毕，最后离开群组</div><div class=\"line\">    //注意：dispatch_group_enter|dispatch_group_leave必须成对使用</div></pre></td></tr></table></figure>\n<h4 id=\"5-容易混淆的术语\"><a href=\"#5-容易混淆的术语\" class=\"headerlink\" title=\"5.容易混淆的术语\"></a>5.容易混淆的术语</h4><p>有四个术语容易混淆：<strong>同步、异步、并发、串行</strong></p>\n<ul>\n<li><p>同步和异步主要影响：能不能开启新的线程</p>\n<ul>\n<li>同步：只是在当前线程中执行任务，不具备开启新线程的能力</li>\n<li>异步：可以在新的线程中执行任务，具备开启新线程的能力  </li>\n</ul>\n</li>\n<li><p>并发和串行主要影响：任务的执行方式</p>\n<ul>\n<li>并发：允许多个任务并发（同时）执行</li>\n<li>串行：一个任务执行完毕后，在执行下一个任务</li>\n</ul>\n</li>\n</ul>\n"},{"title":"关于MD5","date":"2016-04-10T14:03:53.000Z","_content":"\n- 什么是MD5?\n \n    MD5全称是Message Digest Algorithm 5，译为“消息摘要算法第5版”\n\n- 效果：对输入信息生成唯一的128位散列值（32个字符）\n\n- MD5的特点：\n 1. 输入两个不同的明文不会得到相同的输出值\n 2. 根据输出值，不能得到原始的明文，即其过程不可逆\n\n- MD5改进：\n    - 加盐（Salt）：在明文的固定位置插入随机串，然后再进行MD5。\n\n    - 先加密，后乱序：先对明文进行MD5，然后对加密得到的MD5串的字符进行乱序。\n\n- 栗子：\n\n    导入NSString+hash.h封装好的加密分类算法下面是封装好的demo：\n    \n\n```\n#import \"ViewController.h\"\n#import \"NSString+Hash.h\"\n\n@interface ViewController ()\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n\n    [super viewDidLoad];\n\n    [self MD5];\n\n    [self MD5Salt:@\"san\"];\n\n    [self doubleMD5];\n\n    [self MD5Reorder];\n\n}\n\n//MD5加密\n\n-(void)MD5{\n\n    NSString *pwd = @\"123456\";\n\n    NSString *pwdMD5 = [pwd md5String];\n\n    NSLog(@\"%@\",pwdMD5);\n\n}\n\n/**\n * 撒盐 加密 MD5($pass.$salt)\n */\n\n-(void)MD5Salt:(NSString *)salt{\n\n    NSString *pwd = @\"123456\";\n\n    pwd =[pwd stringByAppendingString:salt]; 撒盐：随机地往明文中插入任意字符串\n\n    NSString *pwdMD5 = [pwd md5String];\n\n    NSLog(@\"%@\",pwdMD5);\n}\n\n/**\n *  MD5(MD5($pass))\n */\n\n- (void)doubleMD5{\n\n    NSString *pwd = @\"123456\";\n\n    NSString *pwdMD5MD5 = [[pwd md5String]md5String];\n\n    NSLog(@\"%@\",pwdMD5MD5);\n\n}\n\n/**\n *  先加密，后乱序\n */\n\n- (void)MD5Reorder{\n\n    NSString *pwd = @\"123456\";\n\n    NSString *pwdMD5 = [pwd md5String];\n    NSLog(@\"oldpwdMD5=%@\",pwdMD5);\n\n    NSString *prefix = [pwdMD5 substringFromIndex:3]; 从下标为3的开始截取（包含3）\n\n    NSString *subfix = [pwdMD5 substringToIndex:3];   截取0到3的字符串（不包含3）\n\n    pwdMD5 = [prefix stringByAppendingString:subfix];\n    NSLog(@\"newpwdMD5=%@\",pwdMD5);\n}\n\n@end\n```\n\n\n","source":"_posts/关于MD5.md","raw":"---\ntitle: 关于MD5\ndate: 2016-04-10 22:03:53\ntags: iOS学习\n---\n\n- 什么是MD5?\n \n    MD5全称是Message Digest Algorithm 5，译为“消息摘要算法第5版”\n\n- 效果：对输入信息生成唯一的128位散列值（32个字符）\n\n- MD5的特点：\n 1. 输入两个不同的明文不会得到相同的输出值\n 2. 根据输出值，不能得到原始的明文，即其过程不可逆\n\n- MD5改进：\n    - 加盐（Salt）：在明文的固定位置插入随机串，然后再进行MD5。\n\n    - 先加密，后乱序：先对明文进行MD5，然后对加密得到的MD5串的字符进行乱序。\n\n- 栗子：\n\n    导入NSString+hash.h封装好的加密分类算法下面是封装好的demo：\n    \n\n```\n#import \"ViewController.h\"\n#import \"NSString+Hash.h\"\n\n@interface ViewController ()\n\n@end\n\n@implementation ViewController\n\n- (void)viewDidLoad {\n\n    [super viewDidLoad];\n\n    [self MD5];\n\n    [self MD5Salt:@\"san\"];\n\n    [self doubleMD5];\n\n    [self MD5Reorder];\n\n}\n\n//MD5加密\n\n-(void)MD5{\n\n    NSString *pwd = @\"123456\";\n\n    NSString *pwdMD5 = [pwd md5String];\n\n    NSLog(@\"%@\",pwdMD5);\n\n}\n\n/**\n * 撒盐 加密 MD5($pass.$salt)\n */\n\n-(void)MD5Salt:(NSString *)salt{\n\n    NSString *pwd = @\"123456\";\n\n    pwd =[pwd stringByAppendingString:salt]; 撒盐：随机地往明文中插入任意字符串\n\n    NSString *pwdMD5 = [pwd md5String];\n\n    NSLog(@\"%@\",pwdMD5);\n}\n\n/**\n *  MD5(MD5($pass))\n */\n\n- (void)doubleMD5{\n\n    NSString *pwd = @\"123456\";\n\n    NSString *pwdMD5MD5 = [[pwd md5String]md5String];\n\n    NSLog(@\"%@\",pwdMD5MD5);\n\n}\n\n/**\n *  先加密，后乱序\n */\n\n- (void)MD5Reorder{\n\n    NSString *pwd = @\"123456\";\n\n    NSString *pwdMD5 = [pwd md5String];\n    NSLog(@\"oldpwdMD5=%@\",pwdMD5);\n\n    NSString *prefix = [pwdMD5 substringFromIndex:3]; 从下标为3的开始截取（包含3）\n\n    NSString *subfix = [pwdMD5 substringToIndex:3];   截取0到3的字符串（不包含3）\n\n    pwdMD5 = [prefix stringByAppendingString:subfix];\n    NSLog(@\"newpwdMD5=%@\",pwdMD5);\n}\n\n@end\n```\n\n\n","slug":"关于MD5","published":1,"updated":"2017-02-21T06:37:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizf7ij1t00083lftcn2musez","content":"<ul>\n<li><p>什么是MD5?</p>\n<p>  MD5全称是Message Digest Algorithm 5，译为“消息摘要算法第5版”</p>\n</li>\n<li><p>效果：对输入信息生成唯一的128位散列值（32个字符）</p>\n</li>\n<li><p>MD5的特点：</p>\n<ol>\n<li>输入两个不同的明文不会得到相同的输出值</li>\n<li>根据输出值，不能得到原始的明文，即其过程不可逆</li>\n</ol>\n</li>\n<li><p>MD5改进：</p>\n<ul>\n<li><p>加盐（Salt）：在明文的固定位置插入随机串，然后再进行MD5。</p>\n</li>\n<li><p>先加密，后乱序：先对明文进行MD5，然后对加密得到的MD5串的字符进行乱序。</p>\n</li>\n</ul>\n</li>\n<li><p>栗子：</p>\n<p>  导入NSString+hash.h封装好的加密分类算法下面是封装好的demo：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &quot;ViewController.h&quot;</div><div class=\"line\">#import &quot;NSString+Hash.h&quot;</div><div class=\"line\"></div><div class=\"line\">@interface ViewController ()</div><div class=\"line\"></div><div class=\"line\">@end</div><div class=\"line\"></div><div class=\"line\">@implementation ViewController</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\"></div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\"></div><div class=\"line\">    [self MD5];</div><div class=\"line\"></div><div class=\"line\">    [self MD5Salt:@&quot;san&quot;];</div><div class=\"line\"></div><div class=\"line\">    [self doubleMD5];</div><div class=\"line\"></div><div class=\"line\">    [self MD5Reorder];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//MD5加密</div><div class=\"line\"></div><div class=\"line\">-(void)MD5&#123;</div><div class=\"line\"></div><div class=\"line\">    NSString *pwd = @&quot;123456&quot;;</div><div class=\"line\"></div><div class=\"line\">    NSString *pwdMD5 = [pwd md5String];</div><div class=\"line\"></div><div class=\"line\">    NSLog(@&quot;%@&quot;,pwdMD5);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 撒盐 加密 MD5($pass.$salt)</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">-(void)MD5Salt:(NSString *)salt&#123;</div><div class=\"line\"></div><div class=\"line\">    NSString *pwd = @&quot;123456&quot;;</div><div class=\"line\"></div><div class=\"line\">    pwd =[pwd stringByAppendingString:salt]; 撒盐：随机地往明文中插入任意字符串</div><div class=\"line\"></div><div class=\"line\">    NSString *pwdMD5 = [pwd md5String];</div><div class=\"line\"></div><div class=\"line\">    NSLog(@&quot;%@&quot;,pwdMD5);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  MD5(MD5($pass))</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">- (void)doubleMD5&#123;</div><div class=\"line\"></div><div class=\"line\">    NSString *pwd = @&quot;123456&quot;;</div><div class=\"line\"></div><div class=\"line\">    NSString *pwdMD5MD5 = [[pwd md5String]md5String];</div><div class=\"line\"></div><div class=\"line\">    NSLog(@&quot;%@&quot;,pwdMD5MD5);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  先加密，后乱序</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">- (void)MD5Reorder&#123;</div><div class=\"line\"></div><div class=\"line\">    NSString *pwd = @&quot;123456&quot;;</div><div class=\"line\"></div><div class=\"line\">    NSString *pwdMD5 = [pwd md5String];</div><div class=\"line\">    NSLog(@&quot;oldpwdMD5=%@&quot;,pwdMD5);</div><div class=\"line\"></div><div class=\"line\">    NSString *prefix = [pwdMD5 substringFromIndex:3]; 从下标为3的开始截取（包含3）</div><div class=\"line\"></div><div class=\"line\">    NSString *subfix = [pwdMD5 substringToIndex:3];   截取0到3的字符串（不包含3）</div><div class=\"line\"></div><div class=\"line\">    pwdMD5 = [prefix stringByAppendingString:subfix];</div><div class=\"line\">    NSLog(@&quot;newpwdMD5=%@&quot;,pwdMD5);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<ul>\n<li><p>什么是MD5?</p>\n<p>  MD5全称是Message Digest Algorithm 5，译为“消息摘要算法第5版”</p>\n</li>\n<li><p>效果：对输入信息生成唯一的128位散列值（32个字符）</p>\n</li>\n<li><p>MD5的特点：</p>\n<ol>\n<li>输入两个不同的明文不会得到相同的输出值</li>\n<li>根据输出值，不能得到原始的明文，即其过程不可逆</li>\n</ol>\n</li>\n<li><p>MD5改进：</p>\n<ul>\n<li><p>加盐（Salt）：在明文的固定位置插入随机串，然后再进行MD5。</p>\n</li>\n<li><p>先加密，后乱序：先对明文进行MD5，然后对加密得到的MD5串的字符进行乱序。</p>\n</li>\n</ul>\n</li>\n<li><p>栗子：</p>\n<p>  导入NSString+hash.h封装好的加密分类算法下面是封装好的demo：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\">#import &quot;ViewController.h&quot;</div><div class=\"line\">#import &quot;NSString+Hash.h&quot;</div><div class=\"line\"></div><div class=\"line\">@interface ViewController ()</div><div class=\"line\"></div><div class=\"line\">@end</div><div class=\"line\"></div><div class=\"line\">@implementation ViewController</div><div class=\"line\"></div><div class=\"line\">- (void)viewDidLoad &#123;</div><div class=\"line\"></div><div class=\"line\">    [super viewDidLoad];</div><div class=\"line\"></div><div class=\"line\">    [self MD5];</div><div class=\"line\"></div><div class=\"line\">    [self MD5Salt:@&quot;san&quot;];</div><div class=\"line\"></div><div class=\"line\">    [self doubleMD5];</div><div class=\"line\"></div><div class=\"line\">    [self MD5Reorder];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//MD5加密</div><div class=\"line\"></div><div class=\"line\">-(void)MD5&#123;</div><div class=\"line\"></div><div class=\"line\">    NSString *pwd = @&quot;123456&quot;;</div><div class=\"line\"></div><div class=\"line\">    NSString *pwdMD5 = [pwd md5String];</div><div class=\"line\"></div><div class=\"line\">    NSLog(@&quot;%@&quot;,pwdMD5);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * 撒盐 加密 MD5($pass.$salt)</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">-(void)MD5Salt:(NSString *)salt&#123;</div><div class=\"line\"></div><div class=\"line\">    NSString *pwd = @&quot;123456&quot;;</div><div class=\"line\"></div><div class=\"line\">    pwd =[pwd stringByAppendingString:salt]; 撒盐：随机地往明文中插入任意字符串</div><div class=\"line\"></div><div class=\"line\">    NSString *pwdMD5 = [pwd md5String];</div><div class=\"line\"></div><div class=\"line\">    NSLog(@&quot;%@&quot;,pwdMD5);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  MD5(MD5($pass))</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">- (void)doubleMD5&#123;</div><div class=\"line\"></div><div class=\"line\">    NSString *pwd = @&quot;123456&quot;;</div><div class=\"line\"></div><div class=\"line\">    NSString *pwdMD5MD5 = [[pwd md5String]md5String];</div><div class=\"line\"></div><div class=\"line\">    NSLog(@&quot;%@&quot;,pwdMD5MD5);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> *  先加密，后乱序</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">- (void)MD5Reorder&#123;</div><div class=\"line\"></div><div class=\"line\">    NSString *pwd = @&quot;123456&quot;;</div><div class=\"line\"></div><div class=\"line\">    NSString *pwdMD5 = [pwd md5String];</div><div class=\"line\">    NSLog(@&quot;oldpwdMD5=%@&quot;,pwdMD5);</div><div class=\"line\"></div><div class=\"line\">    NSString *prefix = [pwdMD5 substringFromIndex:3]; 从下标为3的开始截取（包含3）</div><div class=\"line\"></div><div class=\"line\">    NSString *subfix = [pwdMD5 substringToIndex:3];   截取0到3的字符串（不包含3）</div><div class=\"line\"></div><div class=\"line\">    pwdMD5 = [prefix stringByAppendingString:subfix];</div><div class=\"line\">    NSLog(@&quot;newpwdMD5=%@&quot;,pwdMD5);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@end</div></pre></td></tr></table></figure>\n"},{"title":"加密概述(网络资料整理)","date":"2016-05-13T14:04:17.000Z","_content":"\n### 一.MD5加密\nMD5主要特点是不可逆，相同数据的MD5值肯定一样，不同数据的MD5值不一样（也不是绝对的，但基本是不能一样的）。\n\nMD5算法还具有以下性质：\n    1. **压缩性**：任意长度的数据，算出的MD5值长度都是固定的。\n    2. **容易计算**：从原数据计算出MD5值很容易。\n    3. **抗修改性**：对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。\n    4. **弱抗碰撞**：已知原数据和其MD5值，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。\n    5. **强抗碰撞**：想找到两个不同的数据，使它们具有相同的MD5值，是非常困难的。\n\nMD5虽然说是不可逆的 但是由于有网站[cmd5.com](http://www.cmd5.com)专门用来查询MD5码,所以有的简单的MD5码是可以在这里搜到源码的。\n\n为了让MD5码更加安全,涌现了很多其他方法 如加盐。盐要足够长足够乱，得到的MD5码就很难查到。\n\n终端代码：`$ echo -n abc|openssl md5` 给字符串abc加密。\n\n### 二.base64加密\n在MIME格式的电子邮件中，base64可以用来将binary的字节序列数据编码成ASCII字符序列构成的文本。使用时，在传输编码方式中指定base64。使用的字符包括大小写字母各26个，加上10个数字，和加号“+”，斜杠“/”，一共64个字符，等号“=”用来作为后缀用途。\n\n完整的base64定义可见RFC 1421和RFC 2045。编码后的数据比原始数据略长，为原来的4/3。\n\n原理图如下\n![](http://olpg4gjcm.bkt.clouddn.com/base64%E5%8E%9F%E7%90%86%E5%9B%BE)\n\n**终端指令**：\n先cd 找到当前目录\n加密：`$ base64 abc.png -o abc.txt` \n\n解密： `$ base64 abc.txt -o 123.png -D`\n    \n### 三.对称加密算法\n**优点**：算法公开、计算量小、加密速度快、加密效率高、可逆；\n\n**缺点**：双方使用相同钥匙，安全性得不到保证；\n\n**现状**：对称加密的速度比公钥加密快很多，在很多场合都需要对称加密，\n\n相较于DES和3DES算法而言，AES算法有着更高的速度和资源使用效率，安全级别也较之更高了，被称为下一代加密标准\n\n**nECB** ：电子代码本，就是说每个块都是独立加密的\n\n**nCBC** ：密码块链，使用一个密钥和一个初始化向量 (IV)对数据执行加密转换 \n\n**ECB和CBC区别**：CBC更加复杂更加安全，里面加入了8位的向量（8个0的话结果等于ECB）。在明文里面改一个字母，ECB密文对应的那一行会改变，CBC密文从那一行往后都会改变。\n\n**ECB终端命令**：\n\n`$ openssl enc -des-ecb -K 616263 -nosalt -in msg1.txt -out msg1.bin`\n\n**CBC终端命令**：\n\n`$ openssl enc -des-cbc -K 616263 -iv 0000000000000000 -nosalt -in msg1.txt -out msg2.bin`\n\n### 四.RSA加密\n\n**RSA非对称加密算法**\n\n非对称加密算法需要两个密钥：公开密钥（publickey）和私有密钥（privatekey）\n\n公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。\n\n**特点**：\n\n非对称密码体制的特点：算法强度复杂、安全性依赖于算法与密钥但是由于其算法复杂，而使得加密解密速度没有对称加密解密的速度快\n\n对称密码体制中只有一种密钥，并且是非公开的，如果要解密就得让对方知道密钥。所以保证其安全性就是保证密钥的安全，而非对称密钥体制有两种密钥，其中一个是公开的，这样就可以不需要像对称密码那样传输对方的密钥了\n\n**基本加密原理**：\n\n(1)找出两个“很大”的质数：P & Q\n\n(2)N = P * Q\n\n(3)M = (P – 1) * (Q – 1)\n\n(4)找出整数E，E与M互质，即除了1之外，没有其他公约数\n\n(5)找出整数D，使得E*D除以M余1，即 (E * D) % M = 1\n\n经过上述准备工作之后，可以得到：\n\nE是公钥，负责加密\n\nD是私钥，负责解密\n\nN负责公钥和私钥之间的联系\n\n加密算法，假定对X进行加密\n\n(X ^ E) % N = Y\n\nn根据费尔马小定义，根据以下公式可以完成解密操作\n\n(Y ^ D) % N = X\n\n但是RSA加密算法效率较差，对大型数据加密时间很长，一般用于小数据。\n\n**常用场景**：\n\n分部要给总部发一段报文，先对报文整个进行MD5得到一个报文摘要，再对这个报文摘要用公钥加密。然后把报文和这个RSA密文一起发过去。\n\n总部接收到报文之后要先确定报文是否在中途被人篡改，就先把这个密文用私钥解密得到报文摘要，再和整个报文MD5一下得到的报文摘要进行对比 如果一样就是没被改过。\n\n","source":"_posts/加密概述.md","raw":"---\ntitle: 加密概述(网络资料整理)\ndate: 2016-05-13 22:04:17\ntags: iOS学习\n---\n\n### 一.MD5加密\nMD5主要特点是不可逆，相同数据的MD5值肯定一样，不同数据的MD5值不一样（也不是绝对的，但基本是不能一样的）。\n\nMD5算法还具有以下性质：\n    1. **压缩性**：任意长度的数据，算出的MD5值长度都是固定的。\n    2. **容易计算**：从原数据计算出MD5值很容易。\n    3. **抗修改性**：对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。\n    4. **弱抗碰撞**：已知原数据和其MD5值，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。\n    5. **强抗碰撞**：想找到两个不同的数据，使它们具有相同的MD5值，是非常困难的。\n\nMD5虽然说是不可逆的 但是由于有网站[cmd5.com](http://www.cmd5.com)专门用来查询MD5码,所以有的简单的MD5码是可以在这里搜到源码的。\n\n为了让MD5码更加安全,涌现了很多其他方法 如加盐。盐要足够长足够乱，得到的MD5码就很难查到。\n\n终端代码：`$ echo -n abc|openssl md5` 给字符串abc加密。\n\n### 二.base64加密\n在MIME格式的电子邮件中，base64可以用来将binary的字节序列数据编码成ASCII字符序列构成的文本。使用时，在传输编码方式中指定base64。使用的字符包括大小写字母各26个，加上10个数字，和加号“+”，斜杠“/”，一共64个字符，等号“=”用来作为后缀用途。\n\n完整的base64定义可见RFC 1421和RFC 2045。编码后的数据比原始数据略长，为原来的4/3。\n\n原理图如下\n![](http://olpg4gjcm.bkt.clouddn.com/base64%E5%8E%9F%E7%90%86%E5%9B%BE)\n\n**终端指令**：\n先cd 找到当前目录\n加密：`$ base64 abc.png -o abc.txt` \n\n解密： `$ base64 abc.txt -o 123.png -D`\n    \n### 三.对称加密算法\n**优点**：算法公开、计算量小、加密速度快、加密效率高、可逆；\n\n**缺点**：双方使用相同钥匙，安全性得不到保证；\n\n**现状**：对称加密的速度比公钥加密快很多，在很多场合都需要对称加密，\n\n相较于DES和3DES算法而言，AES算法有着更高的速度和资源使用效率，安全级别也较之更高了，被称为下一代加密标准\n\n**nECB** ：电子代码本，就是说每个块都是独立加密的\n\n**nCBC** ：密码块链，使用一个密钥和一个初始化向量 (IV)对数据执行加密转换 \n\n**ECB和CBC区别**：CBC更加复杂更加安全，里面加入了8位的向量（8个0的话结果等于ECB）。在明文里面改一个字母，ECB密文对应的那一行会改变，CBC密文从那一行往后都会改变。\n\n**ECB终端命令**：\n\n`$ openssl enc -des-ecb -K 616263 -nosalt -in msg1.txt -out msg1.bin`\n\n**CBC终端命令**：\n\n`$ openssl enc -des-cbc -K 616263 -iv 0000000000000000 -nosalt -in msg1.txt -out msg2.bin`\n\n### 四.RSA加密\n\n**RSA非对称加密算法**\n\n非对称加密算法需要两个密钥：公开密钥（publickey）和私有密钥（privatekey）\n\n公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。\n\n**特点**：\n\n非对称密码体制的特点：算法强度复杂、安全性依赖于算法与密钥但是由于其算法复杂，而使得加密解密速度没有对称加密解密的速度快\n\n对称密码体制中只有一种密钥，并且是非公开的，如果要解密就得让对方知道密钥。所以保证其安全性就是保证密钥的安全，而非对称密钥体制有两种密钥，其中一个是公开的，这样就可以不需要像对称密码那样传输对方的密钥了\n\n**基本加密原理**：\n\n(1)找出两个“很大”的质数：P & Q\n\n(2)N = P * Q\n\n(3)M = (P – 1) * (Q – 1)\n\n(4)找出整数E，E与M互质，即除了1之外，没有其他公约数\n\n(5)找出整数D，使得E*D除以M余1，即 (E * D) % M = 1\n\n经过上述准备工作之后，可以得到：\n\nE是公钥，负责加密\n\nD是私钥，负责解密\n\nN负责公钥和私钥之间的联系\n\n加密算法，假定对X进行加密\n\n(X ^ E) % N = Y\n\nn根据费尔马小定义，根据以下公式可以完成解密操作\n\n(Y ^ D) % N = X\n\n但是RSA加密算法效率较差，对大型数据加密时间很长，一般用于小数据。\n\n**常用场景**：\n\n分部要给总部发一段报文，先对报文整个进行MD5得到一个报文摘要，再对这个报文摘要用公钥加密。然后把报文和这个RSA密文一起发过去。\n\n总部接收到报文之后要先确定报文是否在中途被人篡改，就先把这个密文用私钥解密得到报文摘要，再和整个报文MD5一下得到的报文摘要进行对比 如果一样就是没被改过。\n\n","slug":"加密概述","published":1,"updated":"2017-02-21T06:57:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizf7ij1x000a3lftbjn7zmea","content":"<h3 id=\"一-MD5加密\"><a href=\"#一-MD5加密\" class=\"headerlink\" title=\"一.MD5加密\"></a>一.MD5加密</h3><p>MD5主要特点是不可逆，相同数据的MD5值肯定一样，不同数据的MD5值不一样（也不是绝对的，但基本是不能一样的）。</p>\n<p>MD5算法还具有以下性质：</p>\n<pre><code>1. **压缩性**：任意长度的数据，算出的MD5值长度都是固定的。\n2. **容易计算**：从原数据计算出MD5值很容易。\n3. **抗修改性**：对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。\n4. **弱抗碰撞**：已知原数据和其MD5值，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。\n5. **强抗碰撞**：想找到两个不同的数据，使它们具有相同的MD5值，是非常困难的。\n</code></pre><p>MD5虽然说是不可逆的 但是由于有网站<a href=\"http://www.cmd5.com\" target=\"_blank\" rel=\"external\">cmd5.com</a>专门用来查询MD5码,所以有的简单的MD5码是可以在这里搜到源码的。</p>\n<p>为了让MD5码更加安全,涌现了很多其他方法 如加盐。盐要足够长足够乱，得到的MD5码就很难查到。</p>\n<p>终端代码：<code>$ echo -n abc|openssl md5</code> 给字符串abc加密。</p>\n<h3 id=\"二-base64加密\"><a href=\"#二-base64加密\" class=\"headerlink\" title=\"二.base64加密\"></a>二.base64加密</h3><p>在MIME格式的电子邮件中，base64可以用来将binary的字节序列数据编码成ASCII字符序列构成的文本。使用时，在传输编码方式中指定base64。使用的字符包括大小写字母各26个，加上10个数字，和加号“+”，斜杠“/”，一共64个字符，等号“=”用来作为后缀用途。</p>\n<p>完整的base64定义可见RFC 1421和RFC 2045。编码后的数据比原始数据略长，为原来的4/3。</p>\n<p>原理图如下<br><img src=\"http://olpg4gjcm.bkt.clouddn.com/base64%E5%8E%9F%E7%90%86%E5%9B%BE\" alt=\"\"></p>\n<p><strong>终端指令</strong>：<br>先cd 找到当前目录<br>加密：<code>$ base64 abc.png -o abc.txt</code> </p>\n<p>解密： <code>$ base64 abc.txt -o 123.png -D</code></p>\n<h3 id=\"三-对称加密算法\"><a href=\"#三-对称加密算法\" class=\"headerlink\" title=\"三.对称加密算法\"></a>三.对称加密算法</h3><p><strong>优点</strong>：算法公开、计算量小、加密速度快、加密效率高、可逆；</p>\n<p><strong>缺点</strong>：双方使用相同钥匙，安全性得不到保证；</p>\n<p><strong>现状</strong>：对称加密的速度比公钥加密快很多，在很多场合都需要对称加密，</p>\n<p>相较于DES和3DES算法而言，AES算法有着更高的速度和资源使用效率，安全级别也较之更高了，被称为下一代加密标准</p>\n<p><strong>nECB</strong> ：电子代码本，就是说每个块都是独立加密的</p>\n<p><strong>nCBC</strong> ：密码块链，使用一个密钥和一个初始化向量 (IV)对数据执行加密转换 </p>\n<p><strong>ECB和CBC区别</strong>：CBC更加复杂更加安全，里面加入了8位的向量（8个0的话结果等于ECB）。在明文里面改一个字母，ECB密文对应的那一行会改变，CBC密文从那一行往后都会改变。</p>\n<p><strong>ECB终端命令</strong>：</p>\n<p><code>$ openssl enc -des-ecb -K 616263 -nosalt -in msg1.txt -out msg1.bin</code></p>\n<p><strong>CBC终端命令</strong>：</p>\n<p><code>$ openssl enc -des-cbc -K 616263 -iv 0000000000000000 -nosalt -in msg1.txt -out msg2.bin</code></p>\n<h3 id=\"四-RSA加密\"><a href=\"#四-RSA加密\" class=\"headerlink\" title=\"四.RSA加密\"></a>四.RSA加密</h3><p><strong>RSA非对称加密算法</strong></p>\n<p>非对称加密算法需要两个密钥：公开密钥（publickey）和私有密钥（privatekey）</p>\n<p>公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。</p>\n<p><strong>特点</strong>：</p>\n<p>非对称密码体制的特点：算法强度复杂、安全性依赖于算法与密钥但是由于其算法复杂，而使得加密解密速度没有对称加密解密的速度快</p>\n<p>对称密码体制中只有一种密钥，并且是非公开的，如果要解密就得让对方知道密钥。所以保证其安全性就是保证密钥的安全，而非对称密钥体制有两种密钥，其中一个是公开的，这样就可以不需要像对称密码那样传输对方的密钥了</p>\n<p><strong>基本加密原理</strong>：</p>\n<p>(1)找出两个“很大”的质数：P &amp; Q</p>\n<p>(2)N = P * Q</p>\n<p>(3)M = (P – 1) * (Q – 1)</p>\n<p>(4)找出整数E，E与M互质，即除了1之外，没有其他公约数</p>\n<p>(5)找出整数D，使得E<em>D除以M余1，即 (E </em> D) % M = 1</p>\n<p>经过上述准备工作之后，可以得到：</p>\n<p>E是公钥，负责加密</p>\n<p>D是私钥，负责解密</p>\n<p>N负责公钥和私钥之间的联系</p>\n<p>加密算法，假定对X进行加密</p>\n<p>(X ^ E) % N = Y</p>\n<p>n根据费尔马小定义，根据以下公式可以完成解密操作</p>\n<p>(Y ^ D) % N = X</p>\n<p>但是RSA加密算法效率较差，对大型数据加密时间很长，一般用于小数据。</p>\n<p><strong>常用场景</strong>：</p>\n<p>分部要给总部发一段报文，先对报文整个进行MD5得到一个报文摘要，再对这个报文摘要用公钥加密。然后把报文和这个RSA密文一起发过去。</p>\n<p>总部接收到报文之后要先确定报文是否在中途被人篡改，就先把这个密文用私钥解密得到报文摘要，再和整个报文MD5一下得到的报文摘要进行对比 如果一样就是没被改过。</p>\n","excerpt":"","more":"<h3 id=\"一-MD5加密\"><a href=\"#一-MD5加密\" class=\"headerlink\" title=\"一.MD5加密\"></a>一.MD5加密</h3><p>MD5主要特点是不可逆，相同数据的MD5值肯定一样，不同数据的MD5值不一样（也不是绝对的，但基本是不能一样的）。</p>\n<p>MD5算法还具有以下性质：</p>\n<pre><code>1. **压缩性**：任意长度的数据，算出的MD5值长度都是固定的。\n2. **容易计算**：从原数据计算出MD5值很容易。\n3. **抗修改性**：对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。\n4. **弱抗碰撞**：已知原数据和其MD5值，想找到一个具有相同MD5值的数据（即伪造数据）是非常困难的。\n5. **强抗碰撞**：想找到两个不同的数据，使它们具有相同的MD5值，是非常困难的。\n</code></pre><p>MD5虽然说是不可逆的 但是由于有网站<a href=\"http://www.cmd5.com\">cmd5.com</a>专门用来查询MD5码,所以有的简单的MD5码是可以在这里搜到源码的。</p>\n<p>为了让MD5码更加安全,涌现了很多其他方法 如加盐。盐要足够长足够乱，得到的MD5码就很难查到。</p>\n<p>终端代码：<code>$ echo -n abc|openssl md5</code> 给字符串abc加密。</p>\n<h3 id=\"二-base64加密\"><a href=\"#二-base64加密\" class=\"headerlink\" title=\"二.base64加密\"></a>二.base64加密</h3><p>在MIME格式的电子邮件中，base64可以用来将binary的字节序列数据编码成ASCII字符序列构成的文本。使用时，在传输编码方式中指定base64。使用的字符包括大小写字母各26个，加上10个数字，和加号“+”，斜杠“/”，一共64个字符，等号“=”用来作为后缀用途。</p>\n<p>完整的base64定义可见RFC 1421和RFC 2045。编码后的数据比原始数据略长，为原来的4/3。</p>\n<p>原理图如下<br><img src=\"http://olpg4gjcm.bkt.clouddn.com/base64%E5%8E%9F%E7%90%86%E5%9B%BE\" alt=\"\"></p>\n<p><strong>终端指令</strong>：<br>先cd 找到当前目录<br>加密：<code>$ base64 abc.png -o abc.txt</code> </p>\n<p>解密： <code>$ base64 abc.txt -o 123.png -D</code></p>\n<h3 id=\"三-对称加密算法\"><a href=\"#三-对称加密算法\" class=\"headerlink\" title=\"三.对称加密算法\"></a>三.对称加密算法</h3><p><strong>优点</strong>：算法公开、计算量小、加密速度快、加密效率高、可逆；</p>\n<p><strong>缺点</strong>：双方使用相同钥匙，安全性得不到保证；</p>\n<p><strong>现状</strong>：对称加密的速度比公钥加密快很多，在很多场合都需要对称加密，</p>\n<p>相较于DES和3DES算法而言，AES算法有着更高的速度和资源使用效率，安全级别也较之更高了，被称为下一代加密标准</p>\n<p><strong>nECB</strong> ：电子代码本，就是说每个块都是独立加密的</p>\n<p><strong>nCBC</strong> ：密码块链，使用一个密钥和一个初始化向量 (IV)对数据执行加密转换 </p>\n<p><strong>ECB和CBC区别</strong>：CBC更加复杂更加安全，里面加入了8位的向量（8个0的话结果等于ECB）。在明文里面改一个字母，ECB密文对应的那一行会改变，CBC密文从那一行往后都会改变。</p>\n<p><strong>ECB终端命令</strong>：</p>\n<p><code>$ openssl enc -des-ecb -K 616263 -nosalt -in msg1.txt -out msg1.bin</code></p>\n<p><strong>CBC终端命令</strong>：</p>\n<p><code>$ openssl enc -des-cbc -K 616263 -iv 0000000000000000 -nosalt -in msg1.txt -out msg2.bin</code></p>\n<h3 id=\"四-RSA加密\"><a href=\"#四-RSA加密\" class=\"headerlink\" title=\"四.RSA加密\"></a>四.RSA加密</h3><p><strong>RSA非对称加密算法</strong></p>\n<p>非对称加密算法需要两个密钥：公开密钥（publickey）和私有密钥（privatekey）</p>\n<p>公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。</p>\n<p><strong>特点</strong>：</p>\n<p>非对称密码体制的特点：算法强度复杂、安全性依赖于算法与密钥但是由于其算法复杂，而使得加密解密速度没有对称加密解密的速度快</p>\n<p>对称密码体制中只有一种密钥，并且是非公开的，如果要解密就得让对方知道密钥。所以保证其安全性就是保证密钥的安全，而非对称密钥体制有两种密钥，其中一个是公开的，这样就可以不需要像对称密码那样传输对方的密钥了</p>\n<p><strong>基本加密原理</strong>：</p>\n<p>(1)找出两个“很大”的质数：P &amp; Q</p>\n<p>(2)N = P * Q</p>\n<p>(3)M = (P – 1) * (Q – 1)</p>\n<p>(4)找出整数E，E与M互质，即除了1之外，没有其他公约数</p>\n<p>(5)找出整数D，使得E<em>D除以M余1，即 (E </em> D) % M = 1</p>\n<p>经过上述准备工作之后，可以得到：</p>\n<p>E是公钥，负责加密</p>\n<p>D是私钥，负责解密</p>\n<p>N负责公钥和私钥之间的联系</p>\n<p>加密算法，假定对X进行加密</p>\n<p>(X ^ E) % N = Y</p>\n<p>n根据费尔马小定义，根据以下公式可以完成解密操作</p>\n<p>(Y ^ D) % N = X</p>\n<p>但是RSA加密算法效率较差，对大型数据加密时间很长，一般用于小数据。</p>\n<p><strong>常用场景</strong>：</p>\n<p>分部要给总部发一段报文，先对报文整个进行MD5得到一个报文摘要，再对这个报文摘要用公钥加密。然后把报文和这个RSA密文一起发过去。</p>\n<p>总部接收到报文之后要先确定报文是否在中途被人篡改，就先把这个密文用私钥解密得到报文摘要，再和整个报文MD5一下得到的报文摘要进行对比 如果一样就是没被改过。</p>\n"},{"title":"初识热更新","date":"2017-02-21T07:17:02.000Z","_content":"每次提交版本都得等待一周到两周的审核时间，我是受不了这种速度了，于是决定研究有没有其他的方法跳过提交版本这个步骤，同样能够修复bug呢，于是找到了[JSPatch](https://github.com/bang590/JSPatch)，也许也有很多人觉得这是个很高大上的技术，其实不然，我们只需要在项目里引入极小的引擎文件，就可以使用 JavaScript 调用任何 Objective-C 的原生接口，替换任意 Objective-C 原生方法。当然呢，目前主要用于下发 JS 脚本替换原生 Objective-C 代码，实时修复线上 bug。\n\n首先说一下JSPatch实现的内部原理：JsPatch能做到通过JS调用和改写OC方法最根本的原因是 Objective-C 是动态语言，OC上所有方法的调用、类的生成都通过 Objective-C Runtime 在运行时进行，我们可以通过类名和方法名反射得到相应的类和方法，也可以替换某个类的方法为新的实现，还可以新注册一个类，为类添加方法。所以 JSPatch 的原理就是：JS传递字符串给OC，OC通过 Runtime 接口调用和替换OC方法。这个很容易理解，JS的作用只是一个信使的作用，具体实现还是得靠我们OC,所以说OC还是世界上最美的语言，哈哈。\n\n同时在这里介绍一个比较好的网站 [点这里](http://bang590.github.io/JSPatchConvertor/).这是一个OC转JS的一个工具网站。\n\n下面演示一下具体实现的步骤\n\n```\n- (void)viewDidLoad\n{\n    UITableView* tv = [[UITableView alloc]initWithFrame:self.view.bounds\n                                                 style:UITableViewStylePlain];\n    self.mqTableView = tv;\n    self.mqTableView.delegate = self;\n    self.mqTableView.dataSource = self;\n    [self.view addSubview:self.mqTableView];\n\n}\n\n#pragma mark -- UITableViewDataSource\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section\n{\n    return 3;\n}\n\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    static NSString* i=  @\"cell\";\n    UITableViewCell* cell = [tableView  dequeueReusableCellWithIdentifier:i];\n    if (cell == nil ) {\n        cell =[[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault\n                                    reuseIdentifier:i];\n    }\n    cell.textLabel.text = @\"meiqing\";\n    cell.backgroundColor = [UIColor whiteColor];\n    return cell;\n}\n\n- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    self.dataSource = @[@\"1\",@\"2\"];\n    肯定会超出数组范围导致 crash\n    NSString *content = self.dataSource[indexPath.row];\n}\n```\n显示的结果是这样的\n![](http://olpg4gjcm.bkt.clouddn.com/%E7%83%AD%E6%9B%B4%E6%96%B01)\n上面的图片是没有修改时候的显示，当我点击第三行一定会闪退，怎么修复呢？这个时候就不用发版本了，服务器可以给我们传送一个js文件，文件里的内容是这样的：\n![](http://olpg4gjcm.bkt.clouddn.com/%E7%83%AD%E6%9B%B4%E6%96%B02)\n同时，我们在APPDelegate里调用这个JS就可以了，如下：\n![](http://olpg4gjcm.bkt.clouddn.com/%E7%83%AD%E6%9B%B4%E6%96%B03)\n再次运行就不会出现闪退了。\n\n\n","source":"_posts/初识热更新.md","raw":"---\ntitle: 初识热更新\ndate: 2017-02-21 15:17:02\ntags: iOS学习\n---\n每次提交版本都得等待一周到两周的审核时间，我是受不了这种速度了，于是决定研究有没有其他的方法跳过提交版本这个步骤，同样能够修复bug呢，于是找到了[JSPatch](https://github.com/bang590/JSPatch)，也许也有很多人觉得这是个很高大上的技术，其实不然，我们只需要在项目里引入极小的引擎文件，就可以使用 JavaScript 调用任何 Objective-C 的原生接口，替换任意 Objective-C 原生方法。当然呢，目前主要用于下发 JS 脚本替换原生 Objective-C 代码，实时修复线上 bug。\n\n首先说一下JSPatch实现的内部原理：JsPatch能做到通过JS调用和改写OC方法最根本的原因是 Objective-C 是动态语言，OC上所有方法的调用、类的生成都通过 Objective-C Runtime 在运行时进行，我们可以通过类名和方法名反射得到相应的类和方法，也可以替换某个类的方法为新的实现，还可以新注册一个类，为类添加方法。所以 JSPatch 的原理就是：JS传递字符串给OC，OC通过 Runtime 接口调用和替换OC方法。这个很容易理解，JS的作用只是一个信使的作用，具体实现还是得靠我们OC,所以说OC还是世界上最美的语言，哈哈。\n\n同时在这里介绍一个比较好的网站 [点这里](http://bang590.github.io/JSPatchConvertor/).这是一个OC转JS的一个工具网站。\n\n下面演示一下具体实现的步骤\n\n```\n- (void)viewDidLoad\n{\n    UITableView* tv = [[UITableView alloc]initWithFrame:self.view.bounds\n                                                 style:UITableViewStylePlain];\n    self.mqTableView = tv;\n    self.mqTableView.delegate = self;\n    self.mqTableView.dataSource = self;\n    [self.view addSubview:self.mqTableView];\n\n}\n\n#pragma mark -- UITableViewDataSource\n- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section\n{\n    return 3;\n}\n\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    static NSString* i=  @\"cell\";\n    UITableViewCell* cell = [tableView  dequeueReusableCellWithIdentifier:i];\n    if (cell == nil ) {\n        cell =[[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault\n                                    reuseIdentifier:i];\n    }\n    cell.textLabel.text = @\"meiqing\";\n    cell.backgroundColor = [UIColor whiteColor];\n    return cell;\n}\n\n- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath\n{\n    self.dataSource = @[@\"1\",@\"2\"];\n    肯定会超出数组范围导致 crash\n    NSString *content = self.dataSource[indexPath.row];\n}\n```\n显示的结果是这样的\n![](http://olpg4gjcm.bkt.clouddn.com/%E7%83%AD%E6%9B%B4%E6%96%B01)\n上面的图片是没有修改时候的显示，当我点击第三行一定会闪退，怎么修复呢？这个时候就不用发版本了，服务器可以给我们传送一个js文件，文件里的内容是这样的：\n![](http://olpg4gjcm.bkt.clouddn.com/%E7%83%AD%E6%9B%B4%E6%96%B02)\n同时，我们在APPDelegate里调用这个JS就可以了，如下：\n![](http://olpg4gjcm.bkt.clouddn.com/%E7%83%AD%E6%9B%B4%E6%96%B03)\n再次运行就不会出现闪退了。\n\n\n","slug":"初识热更新","published":1,"updated":"2017-02-21T07:25:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizf7ij22000d3lft9bvvrhue","content":"<p>每次提交版本都得等待一周到两周的审核时间，我是受不了这种速度了，于是决定研究有没有其他的方法跳过提交版本这个步骤，同样能够修复bug呢，于是找到了<a href=\"https://github.com/bang590/JSPatch\" target=\"_blank\" rel=\"external\">JSPatch</a>，也许也有很多人觉得这是个很高大上的技术，其实不然，我们只需要在项目里引入极小的引擎文件，就可以使用 JavaScript 调用任何 Objective-C 的原生接口，替换任意 Objective-C 原生方法。当然呢，目前主要用于下发 JS 脚本替换原生 Objective-C 代码，实时修复线上 bug。</p>\n<p>首先说一下JSPatch实现的内部原理：JsPatch能做到通过JS调用和改写OC方法最根本的原因是 Objective-C 是动态语言，OC上所有方法的调用、类的生成都通过 Objective-C Runtime 在运行时进行，我们可以通过类名和方法名反射得到相应的类和方法，也可以替换某个类的方法为新的实现，还可以新注册一个类，为类添加方法。所以 JSPatch 的原理就是：JS传递字符串给OC，OC通过 Runtime 接口调用和替换OC方法。这个很容易理解，JS的作用只是一个信使的作用，具体实现还是得靠我们OC,所以说OC还是世界上最美的语言，哈哈。</p>\n<p>同时在这里介绍一个比较好的网站 <a href=\"http://bang590.github.io/JSPatchConvertor/\" target=\"_blank\" rel=\"external\">点这里</a>.这是一个OC转JS的一个工具网站。</p>\n<p>下面演示一下具体实现的步骤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)viewDidLoad</div><div class=\"line\">&#123;</div><div class=\"line\">    UITableView* tv = [[UITableView alloc]initWithFrame:self.view.bounds</div><div class=\"line\">                                                 style:UITableViewStylePlain];</div><div class=\"line\">    self.mqTableView = tv;</div><div class=\"line\">    self.mqTableView.delegate = self;</div><div class=\"line\">    self.mqTableView.dataSource = self;</div><div class=\"line\">    [self.view addSubview:self.mqTableView];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark -- UITableViewDataSource</div><div class=\"line\">- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section</div><div class=\"line\">&#123;</div><div class=\"line\">    return 3;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath</div><div class=\"line\">&#123;</div><div class=\"line\">    static NSString* i=  @&quot;cell&quot;;</div><div class=\"line\">    UITableViewCell* cell = [tableView  dequeueReusableCellWithIdentifier:i];</div><div class=\"line\">    if (cell == nil ) &#123;</div><div class=\"line\">        cell =[[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault</div><div class=\"line\">                                    reuseIdentifier:i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    cell.textLabel.text = @&quot;meiqing&quot;;</div><div class=\"line\">    cell.backgroundColor = [UIColor whiteColor];</div><div class=\"line\">    return cell;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath</div><div class=\"line\">&#123;</div><div class=\"line\">    self.dataSource = @[@&quot;1&quot;,@&quot;2&quot;];</div><div class=\"line\">    肯定会超出数组范围导致 crash</div><div class=\"line\">    NSString *content = self.dataSource[indexPath.row];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>显示的结果是这样的<br><img src=\"http://olpg4gjcm.bkt.clouddn.com/%E7%83%AD%E6%9B%B4%E6%96%B01\" alt=\"\"><br>上面的图片是没有修改时候的显示，当我点击第三行一定会闪退，怎么修复呢？这个时候就不用发版本了，服务器可以给我们传送一个js文件，文件里的内容是这样的：<br><img src=\"http://olpg4gjcm.bkt.clouddn.com/%E7%83%AD%E6%9B%B4%E6%96%B02\" alt=\"\"><br>同时，我们在APPDelegate里调用这个JS就可以了，如下：<br><img src=\"http://olpg4gjcm.bkt.clouddn.com/%E7%83%AD%E6%9B%B4%E6%96%B03\" alt=\"\"><br>再次运行就不会出现闪退了。</p>\n","excerpt":"","more":"<p>每次提交版本都得等待一周到两周的审核时间，我是受不了这种速度了，于是决定研究有没有其他的方法跳过提交版本这个步骤，同样能够修复bug呢，于是找到了<a href=\"https://github.com/bang590/JSPatch\">JSPatch</a>，也许也有很多人觉得这是个很高大上的技术，其实不然，我们只需要在项目里引入极小的引擎文件，就可以使用 JavaScript 调用任何 Objective-C 的原生接口，替换任意 Objective-C 原生方法。当然呢，目前主要用于下发 JS 脚本替换原生 Objective-C 代码，实时修复线上 bug。</p>\n<p>首先说一下JSPatch实现的内部原理：JsPatch能做到通过JS调用和改写OC方法最根本的原因是 Objective-C 是动态语言，OC上所有方法的调用、类的生成都通过 Objective-C Runtime 在运行时进行，我们可以通过类名和方法名反射得到相应的类和方法，也可以替换某个类的方法为新的实现，还可以新注册一个类，为类添加方法。所以 JSPatch 的原理就是：JS传递字符串给OC，OC通过 Runtime 接口调用和替换OC方法。这个很容易理解，JS的作用只是一个信使的作用，具体实现还是得靠我们OC,所以说OC还是世界上最美的语言，哈哈。</p>\n<p>同时在这里介绍一个比较好的网站 <a href=\"http://bang590.github.io/JSPatchConvertor/\">点这里</a>.这是一个OC转JS的一个工具网站。</p>\n<p>下面演示一下具体实现的步骤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)viewDidLoad</div><div class=\"line\">&#123;</div><div class=\"line\">    UITableView* tv = [[UITableView alloc]initWithFrame:self.view.bounds</div><div class=\"line\">                                                 style:UITableViewStylePlain];</div><div class=\"line\">    self.mqTableView = tv;</div><div class=\"line\">    self.mqTableView.delegate = self;</div><div class=\"line\">    self.mqTableView.dataSource = self;</div><div class=\"line\">    [self.view addSubview:self.mqTableView];</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#pragma mark -- UITableViewDataSource</div><div class=\"line\">- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section</div><div class=\"line\">&#123;</div><div class=\"line\">    return 3;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath</div><div class=\"line\">&#123;</div><div class=\"line\">    static NSString* i=  @&quot;cell&quot;;</div><div class=\"line\">    UITableViewCell* cell = [tableView  dequeueReusableCellWithIdentifier:i];</div><div class=\"line\">    if (cell == nil ) &#123;</div><div class=\"line\">        cell =[[UITableViewCell alloc]initWithStyle:UITableViewCellStyleDefault</div><div class=\"line\">                                    reuseIdentifier:i];</div><div class=\"line\">    &#125;</div><div class=\"line\">    cell.textLabel.text = @&quot;meiqing&quot;;</div><div class=\"line\">    cell.backgroundColor = [UIColor whiteColor];</div><div class=\"line\">    return cell;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath</div><div class=\"line\">&#123;</div><div class=\"line\">    self.dataSource = @[@&quot;1&quot;,@&quot;2&quot;];</div><div class=\"line\">    肯定会超出数组范围导致 crash</div><div class=\"line\">    NSString *content = self.dataSource[indexPath.row];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>显示的结果是这样的<br><img src=\"http://olpg4gjcm.bkt.clouddn.com/%E7%83%AD%E6%9B%B4%E6%96%B01\" alt=\"\"><br>上面的图片是没有修改时候的显示，当我点击第三行一定会闪退，怎么修复呢？这个时候就不用发版本了，服务器可以给我们传送一个js文件，文件里的内容是这样的：<br><img src=\"http://olpg4gjcm.bkt.clouddn.com/%E7%83%AD%E6%9B%B4%E6%96%B02\" alt=\"\"><br>同时，我们在APPDelegate里调用这个JS就可以了，如下：<br><img src=\"http://olpg4gjcm.bkt.clouddn.com/%E7%83%AD%E6%9B%B4%E6%96%B03\" alt=\"\"><br>再次运行就不会出现闪退了。</p>\n"},{"title":"对人工智能的一点看法","date":"2017-02-06T12:06:51.000Z","_content":"\n下午茶时间在公司附近超市闲逛，发现这家超市多了几台自助收银机，顾客买了商品后，用机器自助扫描，自助付款，全程没有收银员参与，这让我想起一年前去中国银行办卡，第一次用到的自助办卡机，有了这个机器，顾客不用和柜员直接面对面了，但仍需要柜员，只不过柜员在机器的那头远程为顾客办理业务，这样的办公模式大大提高了银行的服务效率！也许再过一段时间，银行将不需要柜员，纯机器就可以办理业务，这也意味着必将有一批银行柜员和超市收银员失业或转岗……\n\n进入16年，人工智能越来越多的进入到普通人的生活中，从智能家居到可穿戴设备再到自动驾驶，从AlphaGo战胜李世石开始，各大科技巨头就纷纷开始布局人工智能，富士康已经用大量机器人代替了数万名流水线工人……不少行业大佬预计2017年将是人工智能飞速发展的一年，作为一名移动端开发程序员，面对人工智能，我是有些恐慌的，既然司机和律师这样专业性较强的职业都会被人工智能取代，那么部分程序员也必将被人工智能取代，随着小程序和混合开发的出现，彻底的原生app越来越少，也许很快人工智能就能自己开发app了，初级程序员会像部分收银员和银行柜员一样，要么失业要么转岗，但是话说回来，作为一名程序员，如果没有基本的独立思考能力和自学能力，不管在何时都很难赶上科技发展的浪潮，最终被拍死在沙滩上……\n\n最近网上不少大咖推荐《未来简史》这本书，据说是本非常开脑洞的书，为了对未来有更好的准备，或许该买来看看！未来已经到来，人工智能只是导火索，只有活在未来的人很难被淘汰，所以要努力成为一个活在未来的人！\n\n\n","source":"_posts/对人工智能的一点看法.md","raw":"---\ntitle: 对人工智能的一点看法\ndate: 2017-02-06 20:06:51\ntags: 随笔\n---\n\n下午茶时间在公司附近超市闲逛，发现这家超市多了几台自助收银机，顾客买了商品后，用机器自助扫描，自助付款，全程没有收银员参与，这让我想起一年前去中国银行办卡，第一次用到的自助办卡机，有了这个机器，顾客不用和柜员直接面对面了，但仍需要柜员，只不过柜员在机器的那头远程为顾客办理业务，这样的办公模式大大提高了银行的服务效率！也许再过一段时间，银行将不需要柜员，纯机器就可以办理业务，这也意味着必将有一批银行柜员和超市收银员失业或转岗……\n\n进入16年，人工智能越来越多的进入到普通人的生活中，从智能家居到可穿戴设备再到自动驾驶，从AlphaGo战胜李世石开始，各大科技巨头就纷纷开始布局人工智能，富士康已经用大量机器人代替了数万名流水线工人……不少行业大佬预计2017年将是人工智能飞速发展的一年，作为一名移动端开发程序员，面对人工智能，我是有些恐慌的，既然司机和律师这样专业性较强的职业都会被人工智能取代，那么部分程序员也必将被人工智能取代，随着小程序和混合开发的出现，彻底的原生app越来越少，也许很快人工智能就能自己开发app了，初级程序员会像部分收银员和银行柜员一样，要么失业要么转岗，但是话说回来，作为一名程序员，如果没有基本的独立思考能力和自学能力，不管在何时都很难赶上科技发展的浪潮，最终被拍死在沙滩上……\n\n最近网上不少大咖推荐《未来简史》这本书，据说是本非常开脑洞的书，为了对未来有更好的准备，或许该买来看看！未来已经到来，人工智能只是导火索，只有活在未来的人很难被淘汰，所以要努力成为一个活在未来的人！\n\n\n","slug":"对人工智能的一点看法","published":1,"updated":"2017-02-21T01:33:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizf7ij23000f3lftc270xh3s","content":"<p>下午茶时间在公司附近超市闲逛，发现这家超市多了几台自助收银机，顾客买了商品后，用机器自助扫描，自助付款，全程没有收银员参与，这让我想起一年前去中国银行办卡，第一次用到的自助办卡机，有了这个机器，顾客不用和柜员直接面对面了，但仍需要柜员，只不过柜员在机器的那头远程为顾客办理业务，这样的办公模式大大提高了银行的服务效率！也许再过一段时间，银行将不需要柜员，纯机器就可以办理业务，这也意味着必将有一批银行柜员和超市收银员失业或转岗……</p>\n<p>进入16年，人工智能越来越多的进入到普通人的生活中，从智能家居到可穿戴设备再到自动驾驶，从AlphaGo战胜李世石开始，各大科技巨头就纷纷开始布局人工智能，富士康已经用大量机器人代替了数万名流水线工人……不少行业大佬预计2017年将是人工智能飞速发展的一年，作为一名移动端开发程序员，面对人工智能，我是有些恐慌的，既然司机和律师这样专业性较强的职业都会被人工智能取代，那么部分程序员也必将被人工智能取代，随着小程序和混合开发的出现，彻底的原生app越来越少，也许很快人工智能就能自己开发app了，初级程序员会像部分收银员和银行柜员一样，要么失业要么转岗，但是话说回来，作为一名程序员，如果没有基本的独立思考能力和自学能力，不管在何时都很难赶上科技发展的浪潮，最终被拍死在沙滩上……</p>\n<p>最近网上不少大咖推荐《未来简史》这本书，据说是本非常开脑洞的书，为了对未来有更好的准备，或许该买来看看！未来已经到来，人工智能只是导火索，只有活在未来的人很难被淘汰，所以要努力成为一个活在未来的人！</p>\n","excerpt":"","more":"<p>下午茶时间在公司附近超市闲逛，发现这家超市多了几台自助收银机，顾客买了商品后，用机器自助扫描，自助付款，全程没有收银员参与，这让我想起一年前去中国银行办卡，第一次用到的自助办卡机，有了这个机器，顾客不用和柜员直接面对面了，但仍需要柜员，只不过柜员在机器的那头远程为顾客办理业务，这样的办公模式大大提高了银行的服务效率！也许再过一段时间，银行将不需要柜员，纯机器就可以办理业务，这也意味着必将有一批银行柜员和超市收银员失业或转岗……</p>\n<p>进入16年，人工智能越来越多的进入到普通人的生活中，从智能家居到可穿戴设备再到自动驾驶，从AlphaGo战胜李世石开始，各大科技巨头就纷纷开始布局人工智能，富士康已经用大量机器人代替了数万名流水线工人……不少行业大佬预计2017年将是人工智能飞速发展的一年，作为一名移动端开发程序员，面对人工智能，我是有些恐慌的，既然司机和律师这样专业性较强的职业都会被人工智能取代，那么部分程序员也必将被人工智能取代，随着小程序和混合开发的出现，彻底的原生app越来越少，也许很快人工智能就能自己开发app了，初级程序员会像部分收银员和银行柜员一样，要么失业要么转岗，但是话说回来，作为一名程序员，如果没有基本的独立思考能力和自学能力，不管在何时都很难赶上科技发展的浪潮，最终被拍死在沙滩上……</p>\n<p>最近网上不少大咖推荐《未来简史》这本书，据说是本非常开脑洞的书，为了对未来有更好的准备，或许该买来看看！未来已经到来，人工智能只是导火索，只有活在未来的人很难被淘汰，所以要努力成为一个活在未来的人！</p>\n"},{"title":"运动给我势能","date":"2017-01-11T14:49:11.000Z","_content":"\n坚持慢跑和健身有一段时间了，16年中旬开始用keep健身，中间跳了几周insanity（太伤膝盖，已放弃），年底开始用咕咚跑步，下面两张图是目前为止我的运动数据：\n\n![](http://olpg4gjcm.bkt.clouddn.com/keep%E8%BF%90%E5%8A%A8%E8%AE%B0%E5%BD%95.jpg?imageMogr2/thumbnail/!50p)  ![](http://olpg4gjcm.bkt.clouddn.com/%E5%92%95%E5%92%9A%E8%BF%90%E5%8A%A8%E8%AE%B0%E5%BD%95.jpg?imageMogr2/thumbnail/!40p)\n\n在日常生活中也不难发现，长期运动的人精神面貌会比不爱运动的人更好，有一种健康的，朝气蓬勃气质（看下宁泽涛、孙杨就知道），虽然持续运动的时间不算长，但我已切身感受到运动给我的生活带来了改变：敲代码更加专注了，工作效率更高了，负面情绪变少了，气色变好了……于是，对大部分人来说痛苦的运动逐渐变成了我的每日刚需……当然，运动带给我更多的是一种势能，不管是慢跑还是有氧健身，每次运动结束，都会觉得浑身充满力量，生活变得更有动力，态度也更加积极，以至于每次跑步都停不下来，甚至到了不运动不舒服地步……我会持续运动下去，没有终点！\n\n","source":"_posts/运动给我势能.md","raw":"---\ntitle: 运动给我势能\ndate: 2017-01-11 22:49:11\ntags: 随笔\n---\n\n坚持慢跑和健身有一段时间了，16年中旬开始用keep健身，中间跳了几周insanity（太伤膝盖，已放弃），年底开始用咕咚跑步，下面两张图是目前为止我的运动数据：\n\n![](http://olpg4gjcm.bkt.clouddn.com/keep%E8%BF%90%E5%8A%A8%E8%AE%B0%E5%BD%95.jpg?imageMogr2/thumbnail/!50p)  ![](http://olpg4gjcm.bkt.clouddn.com/%E5%92%95%E5%92%9A%E8%BF%90%E5%8A%A8%E8%AE%B0%E5%BD%95.jpg?imageMogr2/thumbnail/!40p)\n\n在日常生活中也不难发现，长期运动的人精神面貌会比不爱运动的人更好，有一种健康的，朝气蓬勃气质（看下宁泽涛、孙杨就知道），虽然持续运动的时间不算长，但我已切身感受到运动给我的生活带来了改变：敲代码更加专注了，工作效率更高了，负面情绪变少了，气色变好了……于是，对大部分人来说痛苦的运动逐渐变成了我的每日刚需……当然，运动带给我更多的是一种势能，不管是慢跑还是有氧健身，每次运动结束，都会觉得浑身充满力量，生活变得更有动力，态度也更加积极，以至于每次跑步都停不下来，甚至到了不运动不舒服地步……我会持续运动下去，没有终点！\n\n","slug":"运动给我势能","published":1,"updated":"2017-02-21T06:14:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizf7ij26000h3lftntblnvvb","content":"<p>坚持慢跑和健身有一段时间了，16年中旬开始用keep健身，中间跳了几周insanity（太伤膝盖，已放弃），年底开始用咕咚跑步，下面两张图是目前为止我的运动数据：</p>\n<p><img src=\"http://olpg4gjcm.bkt.clouddn.com/keep%E8%BF%90%E5%8A%A8%E8%AE%B0%E5%BD%95.jpg?imageMogr2/thumbnail/!50p\" alt=\"\">  <img src=\"http://olpg4gjcm.bkt.clouddn.com/%E5%92%95%E5%92%9A%E8%BF%90%E5%8A%A8%E8%AE%B0%E5%BD%95.jpg?imageMogr2/thumbnail/!40p\" alt=\"\"></p>\n<p>在日常生活中也不难发现，长期运动的人精神面貌会比不爱运动的人更好，有一种健康的，朝气蓬勃气质（看下宁泽涛、孙杨就知道），虽然持续运动的时间不算长，但我已切身感受到运动给我的生活带来了改变：敲代码更加专注了，工作效率更高了，负面情绪变少了，气色变好了……于是，对大部分人来说痛苦的运动逐渐变成了我的每日刚需……当然，运动带给我更多的是一种势能，不管是慢跑还是有氧健身，每次运动结束，都会觉得浑身充满力量，生活变得更有动力，态度也更加积极，以至于每次跑步都停不下来，甚至到了不运动不舒服地步……我会持续运动下去，没有终点！</p>\n","excerpt":"","more":"<p>坚持慢跑和健身有一段时间了，16年中旬开始用keep健身，中间跳了几周insanity（太伤膝盖，已放弃），年底开始用咕咚跑步，下面两张图是目前为止我的运动数据：</p>\n<p><img src=\"http://olpg4gjcm.bkt.clouddn.com/keep%E8%BF%90%E5%8A%A8%E8%AE%B0%E5%BD%95.jpg?imageMogr2/thumbnail/!50p\" alt=\"\">  <img src=\"http://olpg4gjcm.bkt.clouddn.com/%E5%92%95%E5%92%9A%E8%BF%90%E5%8A%A8%E8%AE%B0%E5%BD%95.jpg?imageMogr2/thumbnail/!40p\" alt=\"\"></p>\n<p>在日常生活中也不难发现，长期运动的人精神面貌会比不爱运动的人更好，有一种健康的，朝气蓬勃气质（看下宁泽涛、孙杨就知道），虽然持续运动的时间不算长，但我已切身感受到运动给我的生活带来了改变：敲代码更加专注了，工作效率更高了，负面情绪变少了，气色变好了……于是，对大部分人来说痛苦的运动逐渐变成了我的每日刚需……当然，运动带给我更多的是一种势能，不管是慢跑还是有氧健身，每次运动结束，都会觉得浑身充满力量，生活变得更有动力，态度也更加积极，以至于每次跑步都停不下来，甚至到了不运动不舒服地步……我会持续运动下去，没有终点！</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cizf7ij1l00043lft0jm3t0wz","tag_id":"cizf7ij1h00023lftmocb86c3","_id":"cizf7ij1t00073lft5e9u92i6"},{"post_id":"cizf7ij1900003lfty6l3y7i5","tag_id":"cizf7ij1h00023lftmocb86c3","_id":"cizf7ij1x00093lftzomluog0"},{"post_id":"cizf7ij1o00053lftpmqz7ru5","tag_id":"cizf7ij1h00023lftmocb86c3","_id":"cizf7ij22000c3lftxlyrt8qt"},{"post_id":"cizf7ij1t00083lftcn2musez","tag_id":"cizf7ij1h00023lftmocb86c3","_id":"cizf7ij23000e3lftu51pftqp"},{"post_id":"cizf7ij1e00013lft7pjpltcq","tag_id":"cizf7ij1h00023lftmocb86c3","_id":"cizf7ij26000g3lftlkvhfeyv"},{"post_id":"cizf7ij1x000a3lftbjn7zmea","tag_id":"cizf7ij1h00023lftmocb86c3","_id":"cizf7ij2a000j3lftf3pqzyvq"},{"post_id":"cizf7ij22000d3lft9bvvrhue","tag_id":"cizf7ij1h00023lftmocb86c3","_id":"cizf7ij2a000k3lftskmrbo7h"},{"post_id":"cizf7ij1k00033lft53s1kcci","tag_id":"cizf7ij1h00023lftmocb86c3","_id":"cizf7ij2b000l3lftxpo066zo"},{"post_id":"cizf7ij23000f3lftc270xh3s","tag_id":"cizf7ij29000i3lfta5f8jtw4","_id":"cizf7ij2d000n3lftj45mv85r"},{"post_id":"cizf7ij26000h3lftntblnvvb","tag_id":"cizf7ij29000i3lfta5f8jtw4","_id":"cizf7ij2e000o3lftr2g79odt"}],"Tag":[{"name":"iOS学习","_id":"cizf7ij1h00023lftmocb86c3"},{"name":"随笔","_id":"cizf7ij29000i3lfta5f8jtw4"}]}}